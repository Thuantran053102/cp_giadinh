{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _nonSecure=require(\"nanoid/non-secure\");var BaseRouter={getStateForAction:function getStateForAction(state,action){switch(action.type){case'SET_PARAMS':{var index=action.source?state.routes.findIndex(function(r){return r.key===action.source;}):state.index;if(index===-1){return null;}return(0,_extends2.default)({},state,{routes:state.routes.map(function(r,i){return i===index?(0,_extends2.default)({},r,{params:(0,_extends2.default)({},r.params,action.payload.params)}):r;})});}case'RESET':{var nextState=action.payload;if(nextState.routes.length===0||nextState.routes.some(function(route){return!state.routeNames.includes(route.name);})){return null;}if(nextState.stale===false){if(state.routeNames.length!==nextState.routeNames.length||nextState.routeNames.some(function(name){return!state.routeNames.includes(name);})){return null;}return(0,_extends2.default)({},nextState,{routes:nextState.routes.map(function(route){return route.key?route:(0,_extends2.default)({},route,{key:\"\".concat(route.name,\"-\").concat((0,_nonSecure.nanoid)())});})});}return nextState;}default:return null;}},shouldActionChangeFocus:function shouldActionChangeFocus(action){return action.type==='NAVIGATE';}};var _default=BaseRouter;exports.default=_default;","map":{"version":3,"sources":["BaseRouter.tsx"],"names":["BaseRouter","getStateForAction","action","index","state","r","routes","params","nextState","route","name","key","shouldActionChangeFocus"],"mappings":"mPAAA,4CAWA,GAAMA,WAAU,CAAG,CACjBC,iBADiB,4BACA,KADA,CACA,MADA,CAIqB,CACpC,OAAQC,MAAM,CAAd,IAAA,EACE,IAAA,YAAA,CAAmB,CACjB,GAAMC,MAAK,CAAGD,MAAM,CAANA,MAAAA,CACVE,KAAK,CAALA,MAAAA,CAAAA,SAAAA,CAAwBC,SAAAA,CAAD,QAAOA,EAAC,CAADA,GAAAA,GAAUH,MAAM,CADpCA,MACa,EAAvBE,CADUF,CAEVE,KAAK,CAFT,KAAA,CAIA,GAAID,KAAK,GAAK,CAAd,CAAA,CAAkB,CAChB,MAAA,KAAA,CACD,CAED,+BAAO,KAAP,EAEEG,MAAM,CAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,CAAA,CAAA,CAAA,QACvB,EAAC,GAAD,KAAA,0BACI,CADJ,EACYC,MAAM,0BAAOF,CAAC,CAAN,MAAF,CAAoBH,MAAM,CAANA,OAAAA,CAAeK,MAAnC,CADlB,GADM,CAAiB,EAAjB,CAFV,GAQD,CAED,IAAA,OAAA,CAAc,CACZ,GAAMC,UAAS,CAAGN,MAAM,CAAxB,OAAA,CAEA,GACEM,SAAS,CAATA,MAAAA,CAAAA,MAAAA,GAAAA,CAAAA,EACAA,SAAS,CAATA,MAAAA,CAAAA,IAAAA,CACGC,SAAAA,KAAD,QAA6B,CAACL,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAA0BK,KAAK,CAHjE,IAGkCL,CAA9B,EADFI,CAFF,CAKE,CACA,MAAA,KAAA,CACD,CAED,GAAIA,SAAS,CAATA,KAAAA,GAAJ,KAAA,CAA+B,CAC7B,GACEJ,KAAK,CAALA,UAAAA,CAAAA,MAAAA,GAA4BI,SAAS,CAATA,UAAAA,CAA5BJ,MAAAA,EACAI,SAAS,CAATA,UAAAA,CAAAA,IAAAA,CACGE,SAAAA,IAAD,QAAU,CAACN,KAAK,CAALA,UAAAA,CAAAA,QAAAA,CAHf,IAGeA,CAAX,EADFI,CAFF,CAKE,CACA,MAAA,KAAA,CACD,CAED,+BAAO,SAAP,EAEEF,MAAM,CAAE,SAAS,CAAT,MAAA,CAAA,GAAA,CAAsBG,SAAAA,KAAD,QAC3BA,MAAK,CAALA,GAAAA,CAAAA,KAAAA,0BAAoB,KAApBA,EAAgCE,GAAG,CAAA,GAAA,MAAA,CAAKF,KAAK,CAAV,IAAA,CAAA,GAAA,EAAA,MAAA,CAAA,GAAA,iBAAA,GAAA,CAAnCA,EAD2B,EAArB,CAFV,GAMD,CAED,MAAA,UAAA,CACD,CAED,QACE,MAAA,KAAA,CAtDJ,CALe,CAAA,CA+DjBG,uBA/DiB,kCA+DM,MA/DN,CA+DuC,CACtD,MAAOV,OAAM,CAANA,IAAAA,GAAP,UAAA,CACD,CAjEgB,CAAnB,C,aAoEA,U","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  CommonNavigationAction,\n  NavigationState,\n  PartialState,\n} from './types';\n\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction<State extends NavigationState>(\n    state: State,\n    action: CommonNavigationAction\n  ): State | PartialState<State> | null {\n    switch (action.type) {\n      case 'SET_PARAMS': {\n        const index = action.source\n          ? state.routes.findIndex((r) => r.key === action.source)\n          : state.index;\n\n        if (index === -1) {\n          return null;\n        }\n\n        return {\n          ...state,\n          routes: state.routes.map((r, i) =>\n            i === index\n              ? { ...r, params: { ...r.params, ...action.payload.params } }\n              : r\n          ),\n        };\n      }\n\n      case 'RESET': {\n        const nextState = action.payload as State | PartialState<State>;\n\n        if (\n          nextState.routes.length === 0 ||\n          nextState.routes.some(\n            (route: { name: string }) => !state.routeNames.includes(route.name)\n          )\n        ) {\n          return null;\n        }\n\n        if (nextState.stale === false) {\n          if (\n            state.routeNames.length !== nextState.routeNames.length ||\n            nextState.routeNames.some(\n              (name) => !state.routeNames.includes(name)\n            )\n          ) {\n            return null;\n          }\n\n          return {\n            ...nextState,\n            routes: nextState.routes.map((route) =>\n              route.key ? route : { ...route, key: `${route.name}-${nanoid()}` }\n            ),\n          };\n        }\n\n        return nextState;\n      }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action: CommonNavigationAction) {\n    return action.type === 'NAVIGATE';\n  },\n};\n\nexport default BaseRouter;\n"]},"metadata":{},"sourceType":"script"}