{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useIsDrawerOpen;var React=_interopRequireWildcard(require(\"react\"));var _DrawerOpenContext=_interopRequireDefault(require(\"./DrawerOpenContext\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useIsDrawerOpen(){var isDrawerOpen=React.useContext(_DrawerOpenContext.default);if(typeof isDrawerOpen!=='boolean'){throw new Error(\"Couldn't find a drawer. Is your component inside a drawer navigator?\");}return isDrawerOpen;}","map":{"version":3,"sources":["useIsDrawerOpen.tsx"],"names":["isDrawerOpen","React"],"mappings":"4KAAA,oDACA,8E,0/BAKe,QAAA,gBAAA,EAA2B,CACxC,GAAMA,aAAY,CAAGC,KAAK,CAALA,UAAAA,CAArB,0BAAqBA,CAArB,CAEA,GAAI,MAAA,aAAA,GAAJ,SAAA,CAAuC,CACrC,KAAM,IAAA,MAAA,CAAN,sEAAM,CAAN,CAGD,CAED,MAAA,aAAA,CACD","sourcesContent":["import * as React from 'react';\nimport DrawerOpenContext from './DrawerOpenContext';\n\n/**\n * Hook to detect if the drawer is open in a parent navigator.\n */\nexport default function useIsDrawerOpen() {\n  const isDrawerOpen = React.useContext(DrawerOpenContext);\n\n  if (typeof isDrawerOpen !== 'boolean') {\n    throw new Error(\n      \"Couldn't find a drawer. Is your component inside a drawer navigator?\"\n    );\n  }\n\n  return isDrawerOpen;\n}\n"]},"metadata":{},"sourceType":"script"}