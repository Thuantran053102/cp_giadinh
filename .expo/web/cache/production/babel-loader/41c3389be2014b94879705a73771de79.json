{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});Object.defineProperty(exports,\"AppOwnership\",{enumerable:true,get:function get(){return _Constants.AppOwnership;}});Object.defineProperty(exports,\"ExecutionEnvironment\",{enumerable:true,get:function get(){return _Constants.ExecutionEnvironment;}});Object.defineProperty(exports,\"UserInterfaceIdiom\",{enumerable:true,get:function get(){return _Constants.UserInterfaceIdiom;}});exports.default=void 0;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _expoModulesCore=require(\"expo-modules-core\");var _reactNative=require(\"react-native\");var _Constants=require(\"./Constants.types\");var _ExponentConstants=_interopRequireDefault(require(\"./ExponentConstants\"));var _constants$platform;if(!_ExponentConstants.default){console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");}var rawManifest=null;if(_expoModulesCore.NativeModulesProxy.ExpoUpdates){var updatesManifest;if(_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest){updatesManifest=_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifest;}else if(_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString){updatesManifest=JSON.parse(_expoModulesCore.NativeModulesProxy.ExpoUpdates.manifestString);}if(updatesManifest&&Object.keys(updatesManifest).length>0){rawManifest=updatesManifest;}}if(_reactNative.NativeModules.EXDevLauncher){var devLauncherManifest;if(_reactNative.NativeModules.EXDevLauncher.manifestString){devLauncherManifest=JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);}if(devLauncherManifest&&Object.keys(devLauncherManifest).length>0){rawManifest=devLauncherManifest;}}if(!rawManifest&&_ExponentConstants.default&&_ExponentConstants.default.manifest){rawManifest=_ExponentConstants.default.manifest;if(typeof rawManifest==='string'){rawManifest=JSON.parse(rawManifest);}}var _ref=_ExponentConstants.default||{},name=_ref.name,appOwnership=_ref.appOwnership,nativeConstants=(0,_objectWithoutProperties2.default)(_ref,[\"name\",\"appOwnership\"]);var warnedAboutDeviceYearClass=false;var warnedAboutIosModel=false;var constants=(0,_extends2.default)({},nativeConstants,{appOwnership:appOwnership!=null?appOwnership:null});Object.defineProperties(constants,{deviceYearClass:{get:function get(){if(!warnedAboutDeviceYearClass){console.warn(\"Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.\");warnedAboutDeviceYearClass=true;}return nativeConstants.deviceYearClass;},enumerable:false},installationId:{get:function get(){return nativeConstants.installationId;},enumerable:false},__unsafeNoWarnManifest:{get:function get(){var maybeManifest=getManifest(true);if(!maybeManifest||!isAppManifest(maybeManifest)){return null;}return maybeManifest;},enumerable:false},__unsafeNoWarnManifest2:{get:function get(){var maybeManifest=getManifest(true);if(!maybeManifest||!isManifest(maybeManifest)){return null;}return maybeManifest;},enumerable:false},manifest:{get:function get(){var maybeManifest=getManifest();if(!maybeManifest||!isAppManifest(maybeManifest)){return null;}return maybeManifest;},enumerable:true},manifest2:{get:function get(){var maybeManifest=getManifest();if(!maybeManifest||!isManifest(maybeManifest)){return null;}return maybeManifest;},enumerable:true},__rawManifest_TEST:{get:function get(){return rawManifest;},set:function set(value){rawManifest=value;},enumerable:false}});if(constants!=null&&(_constants$platform=constants.platform)!=null&&_constants$platform.ios){var originalModel=nativeConstants.platform.ios.model;Object.defineProperty(constants.platform.ios,'model',{get:function get(){if(!warnedAboutIosModel){console.warn(\"Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.\");warnedAboutIosModel=true;}return originalModel;},enumerable:false});}function isAppManifest(manifest){return!isManifest(manifest);}function isManifest(manifest){return'metadata'in manifest;}function getManifest(){var suppressWarning=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(!rawManifest){var invalidManifestType=rawManifest===null?'null':'undefined';if(nativeConstants.executionEnvironment===_Constants.ExecutionEnvironment.Bare&&_reactNative.Platform.OS!=='web'){if(!suppressWarning){console.warn(\"Constants.manifest is \"+invalidManifestType+\" because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.\");}}else if(nativeConstants.executionEnvironment===_Constants.ExecutionEnvironment.StoreClient||nativeConstants.executionEnvironment===_Constants.ExecutionEnvironment.Standalone){throw new _expoModulesCore.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\"Constants.manifest is \"+invalidManifestType+\", must be an object.\");}}return rawManifest;}var _default=constants;exports.default=_default;","map":{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutDeviceYearClass = false;\nlet warnedAboutIosModel = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  // Deprecated field\n  deviceYearClass: {\n    get() {\n      if (!warnedAboutDeviceYearClass) {\n        console.warn(\n          `Constants.deviceYearClass has been deprecated in favor of expo-device's Device.deviceYearClass property. This API will be removed in SDK 45.`\n        );\n        warnedAboutDeviceYearClass = true;\n      }\n      return nativeConstants.deviceYearClass;\n    },\n    enumerable: false,\n  },\n  installationId: {\n    get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false,\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): AppManifest | Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): AppManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isAppManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): Manifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): AppManifest | Manifest | null {\n      return rawManifest;\n    },\n    set(value: AppManifest | Manifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\n// Add deprecation warning for `platform.ios.model`\nif (constants?.platform?.ios) {\n  const originalModel = nativeConstants.platform.ios.model;\n  Object.defineProperty(constants.platform.ios, 'model', {\n    get() {\n      if (!warnedAboutIosModel) {\n        console.warn(\n          `Constants.platform.ios.model has been deprecated in favor of expo-device's Device.modelName property. This API will be removed in SDK 45.`\n        );\n        warnedAboutIosModel = true;\n      }\n      return originalModel;\n    },\n    enumerable: false,\n  });\n}\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}