{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.getPermissionsAsync=getPermissionsAsync;exports.requestPermissionsAsync=requestPermissionsAsync;exports.usePermissions=void 0;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoModulesCore=require(\"expo-modules-core\");var _NotificationPermissionsModule=_interopRequireDefault(require(\"./NotificationPermissionsModule\"));function getPermissionsAsync(){return _regenerator.default.async(function getPermissionsAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(_NotificationPermissionsModule.default.getPermissionsAsync){_context.next=2;break;}throw new _expoModulesCore.UnavailabilityError('Notifications','getPermissionsAsync');case 2:_context.next=4;return _regenerator.default.awrap(_NotificationPermissionsModule.default.getPermissionsAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}function requestPermissionsAsync(permissions){var requestedPermissions,requestedPlatformPermissions;return _regenerator.default.async(function requestPermissionsAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(_NotificationPermissionsModule.default.requestPermissionsAsync){_context2.next=2;break;}throw new _expoModulesCore.UnavailabilityError('Notifications','requestPermissionsAsync');case 2:requestedPermissions=permissions!=null?permissions:{ios:{allowAlert:true,allowBadge:true,allowSound:true}};requestedPlatformPermissions=requestedPermissions[_expoModulesCore.Platform.OS];_context2.next=6;return _regenerator.default.awrap(_NotificationPermissionsModule.default.requestPermissionsAsync(requestedPlatformPermissions));case 6:return _context2.abrupt(\"return\",_context2.sent);case 7:case\"end\":return _context2.stop();}}},null,null,null,Promise);}var usePermissions=(0,_expoModulesCore.createPermissionHook)({requestMethod:requestPermissionsAsync,getMethod:getPermissionsAsync});exports.usePermissions=usePermissions;","map":{"version":3,"sources":["../src/NotificationPermissions.ts"],"names":[],"mappings":"iWAAA,kDAMA,sGAEO,QAAe,oBAAf,oIACA,sCAAA,CAA8B,mBAD9B,8BAEG,IAAI,qCAAJ,CAAwB,eAAxB,CAAyC,qBAAzC,CAFH,0DAKQ,sCAAA,CAA8B,mBAA9B,EALR,6HAQA,QAAe,wBAAf,CAAuC,WAAvC,gMACA,sCAAA,CAA8B,uBAD9B,+BAEG,IAAI,qCAAJ,CAAwB,eAAxB,CAAyC,yBAAzC,CAFH,QAKC,oBALD,CAKwB,WALxB,OAKwB,WALxB,CAKuC,CAC1C,GAAG,CAAE,CACH,UAAU,CAAE,IADT,CAEH,UAAU,CAAE,IAFT,CAGH,UAAU,CAAE,IAHT,CADqC,CALvC,CAYC,4BAZD,CAYgC,oBAAoB,CAAC,yBAAA,CAAS,EAAV,CAZpD,oDAaQ,sCAAA,CAA8B,uBAA9B,CAAsD,4BAAtD,CAbR,gIA0BA,GAAM,eAAc,CAAG,GAAA,qCAAA,EAG5B,CACA,aAAa,CAAE,uBADf,CAEA,SAAS,CAAE,mBAFX,CAH4B,CAAvB,C","sourcesContent":["import { createPermissionHook, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  NotificationPermissionsRequest,\n  NotificationPermissionsStatus,\n} from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to send and receive push notifications.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Notifications.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<\n  NotificationPermissionsStatus,\n  NotificationPermissionsRequest\n>({\n  requestMethod: requestPermissionsAsync,\n  getMethod: getPermissionsAsync,\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}