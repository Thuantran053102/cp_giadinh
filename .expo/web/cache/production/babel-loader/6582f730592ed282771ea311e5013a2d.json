{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=DrawerItemList;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var React=_interopRequireWildcard(require(\"react\"));var _native=require(\"@react-navigation/native\");var _DrawerItem=_interopRequireDefault(require(\"./DrawerItem\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function DrawerItemList(_ref){var state=_ref.state,navigation=_ref.navigation,descriptors=_ref.descriptors,activeTintColor=_ref.activeTintColor,inactiveTintColor=_ref.inactiveTintColor,activeBackgroundColor=_ref.activeBackgroundColor,inactiveBackgroundColor=_ref.inactiveBackgroundColor,itemStyle=_ref.itemStyle,labelStyle=_ref.labelStyle;var buildLink=(0,_native.useLinkBuilder)();return state.routes.map(function(route,i){var focused=i===state.index;var _descriptors$route$ke=descriptors[route.key].options,title=_descriptors$route$ke.title,drawerLabel=_descriptors$route$ke.drawerLabel,drawerIcon=_descriptors$route$ke.drawerIcon;return React.createElement(_DrawerItem.default,{key:route.key,label:drawerLabel!==undefined?drawerLabel:title!==undefined?title:route.name,icon:drawerIcon,focused:focused,activeTintColor:activeTintColor,inactiveTintColor:inactiveTintColor,activeBackgroundColor:activeBackgroundColor,inactiveBackgroundColor:inactiveBackgroundColor,labelStyle:labelStyle,style:itemStyle,to:buildLink(route.name,route.params),onPress:function onPress(){navigation.dispatch((0,_extends2.default)({},focused?_native.DrawerActions.closeDrawer():_native.CommonActions.navigate(route.name),{target:state.key}));}});});}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["labelStyle","buildLink","focused","i","state","drawerIcon","descriptors","route","drawerLabel","title","navigation","DrawerActions","CommonActions","target","key"],"mappings":"2PAAA,oDACA,gDAOA,gE,0/BAgBe,QAAA,eAAA,MAUL,IAV6B,MAU7B,MAV6B,KAU7B,CAV6B,UAU7B,MAV6B,UAU7B,CAV6B,WAU7B,MAV6B,WAU7B,CAV6B,eAU7B,MAV6B,eAU7B,CAV6B,iBAU7B,MAV6B,iBAU7B,CAV6B,qBAU7B,MAV6B,qBAU7B,CAV6B,uBAU7B,MAV6B,uBAU7B,CAV6B,SAU7B,MAV6B,SAU7B,CADRA,UACQ,MADRA,UACQ,CACR,GAAMC,UAAS,CAAf,GAAA,sBAAA,GAAA,CAEA,MAAQ,MAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,KAAA,CAAA,CAAA,CAAc,CACrC,GAAMC,QAAO,CAAGC,CAAC,GAAKC,KAAK,CAA3B,KAAA,CACA,0BAA2CE,WAAW,CAACC,KAAK,CAAjBD,GAAW,CAAXA,CAA3C,OAAA,CAAM,KAAN,uBAAM,KAAN,CAAM,WAAN,uBAAM,WAAN,CAA4BD,UAA5B,uBAA4BA,UAA5B,CAEA,MACE,MAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,CACE,GAAG,CAAEE,KAAK,CADZ,GAAA,CAEE,KAAK,CACHC,WAAW,GAAXA,SAAAA,CAAAA,WAAAA,CAEIC,KAAK,GAALA,SAAAA,CAAAA,KAAAA,CAEAF,KAAK,CAPb,IAAA,CASE,IAAI,CATN,UAAA,CAUE,OAAO,CAVT,OAAA,CAWE,eAAe,CAXjB,eAAA,CAYE,iBAAiB,CAZnB,iBAAA,CAaE,qBAAqB,CAbvB,qBAAA,CAcE,uBAAuB,CAdzB,uBAAA,CAeE,UAAU,CAfZ,UAAA,CAgBE,KAAK,CAhBP,SAAA,CAiBE,EAAE,CAAEN,SAAS,CAACM,KAAK,CAAN,IAAA,CAAaA,KAAK,CAjBjC,MAiBe,CAjBf,CAkBE,OAAO,CAAE,kBAAM,CACbG,UAAU,CAAVA,QAAAA,0BACMR,OAAO,CACPS,qBAAAA,CADO,WACPA,EADO,CAEPC,qBAAAA,CAAAA,QAAAA,CAAuBL,KAAK,CAHd,IAGdK,CAHNF,EAIEG,MAAM,CAAET,KAAK,CAACU,GAJhBJ,IAMD,CAzBH,CAAA,CADF,CAJF,CAAQ,CAAR,CAkCD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport DrawerItem from './DrawerItem';\nimport type {\n  DrawerNavigationHelpers,\n  DrawerDescriptorMap,\n  DrawerContentOptions,\n} from '../types';\n\ntype Props = Omit<DrawerContentOptions, 'contentContainerStyle' | 'style'> & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n  activeTintColor,\n  inactiveTintColor,\n  activeBackgroundColor,\n  inactiveBackgroundColor,\n  itemStyle,\n  labelStyle,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return (state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const { title, drawerLabel, drawerIcon } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        activeBackgroundColor={activeBackgroundColor}\n        inactiveBackgroundColor={inactiveBackgroundColor}\n        labelStyle={labelStyle}\n        style={itemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode) as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"script"}