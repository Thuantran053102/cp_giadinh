{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.DEFAULT_ACTION_IDENTIFIER=void 0;exports.addNotificationReceivedListener=addNotificationReceivedListener;exports.addNotificationResponseReceivedListener=addNotificationResponseReceivedListener;exports.addNotificationsDroppedListener=addNotificationsDroppedListener;exports.getLastNotificationResponseAsync=getLastNotificationResponseAsync;exports.removeNotificationSubscription=removeNotificationSubscription;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoModulesCore=require(\"expo-modules-core\");var _NotificationsEmitterModule=_interopRequireDefault(require(\"./NotificationsEmitterModule\"));var emitter=new _expoModulesCore.EventEmitter(_NotificationsEmitterModule.default);var didReceiveNotificationEventName='onDidReceiveNotification';var didDropNotificationsEventName='onNotificationsDeleted';var didReceiveNotificationResponseEventName='onDidReceiveNotificationResponse';var DEFAULT_ACTION_IDENTIFIER='expo.modules.notifications.actions.DEFAULT';exports.DEFAULT_ACTION_IDENTIFIER=DEFAULT_ACTION_IDENTIFIER;function addNotificationReceivedListener(listener){return emitter.addListener(didReceiveNotificationEventName,listener);}function addNotificationsDroppedListener(listener){return emitter.addListener(didDropNotificationsEventName,listener);}function addNotificationResponseReceivedListener(listener){return emitter.addListener(didReceiveNotificationResponseEventName,listener);}function removeNotificationSubscription(subscription){emitter.removeSubscription(subscription);}function getLastNotificationResponseAsync(){return _regenerator.default.async(function getLastNotificationResponseAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(_NotificationsEmitterModule.default.getLastNotificationResponseAsync){_context.next=2;break;}throw new _expoModulesCore.UnavailabilityError('ExpoNotifications','getLastNotificationResponseAsync');case 2:_context.next=4;return _regenerator.default.awrap(_NotificationsEmitterModule.default.getLastNotificationResponseAsync());case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":"4nBAAA,kDAGA,gGAGA,GAAM,QAAO,CAAG,GAAI,8BAAJ,CAAiB,mCAAjB,CAAhB,CAEA,GAAM,gCAA+B,CAAG,0BAAxC,CACA,GAAM,8BAA6B,CAAG,wBAAtC,CACA,GAAM,wCAAuC,CAAG,kCAAhD,CAEO,GAAM,0BAAyB,CAAG,4CAAlC,C,4DAED,QAAU,gCAAV,CACJ,QADI,CACmC,CAEvC,MAAO,QAAO,CAAC,WAAR,CAAkC,+BAAlC,CAAmE,QAAnE,CAAP,CACD,CAEK,QAAU,gCAAV,CAA0C,QAA1C,CAA8D,CAClE,MAAO,QAAO,CAAC,WAAR,CAA0B,6BAA1B,CAAyD,QAAzD,CAAP,CACD,CAEK,QAAU,wCAAV,CACJ,QADI,CAC2C,CAE/C,MAAO,QAAO,CAAC,WAAR,CACL,uCADK,CAEL,QAFK,CAAP,CAID,CAEK,QAAU,+BAAV,CAAyC,YAAzC,CAAmE,CACvE,OAAO,CAAC,kBAAR,CAA2B,YAA3B,EACD,CAEM,QAAe,iCAAf,iJACA,mCAAA,CAA2B,gCAD3B,8BAEG,IAAI,qCAAJ,CAAwB,mBAAxB,CAA6C,kCAA7C,CAFH,0DAIQ,mCAAA,CAA2B,gCAA3B,EAJR","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\n\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): Subscription {\n  return emitter.addListener<Notification>(didReceiveNotificationEventName, listener);\n}\n\nexport function addNotificationsDroppedListener(listener: () => void): Subscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): Subscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    listener\n  );\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  if (!NotificationsEmitterModule.getLastNotificationResponseAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponseAsync');\n  }\n  return await NotificationsEmitterModule.getLastNotificationResponseAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}