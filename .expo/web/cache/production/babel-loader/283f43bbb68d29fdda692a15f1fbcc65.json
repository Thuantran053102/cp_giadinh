{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=presentNotificationAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoModulesCore=require(\"expo-modules-core\");var _uuid=require(\"uuid\");var _NotificationPresenterModule=_interopRequireDefault(require(\"./NotificationPresenterModule\"));var warningMessageShown=false;function presentNotificationAsync(content){var identifier,_args=arguments;return _regenerator.default.async(function presentNotificationAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:identifier=_args.length>1&&_args[1]!==undefined?_args[1]:(0,_uuid.v4)();if(__DEV__&&!warningMessageShown){console.warn('`presentNotificationAsync` has been deprecated in favor of using `scheduleNotificationAsync` + an explicit notification handler. Read more at https://expo.fyi/presenting-notifications-deprecated.');warningMessageShown=true;}if(_NotificationPresenterModule.default.presentNotificationAsync){_context.next=4;break;}throw new _expoModulesCore.UnavailabilityError('Notifications','presentNotificationAsync');case 4:_context.next=6;return _regenerator.default.awrap(_NotificationPresenterModule.default.presentNotificationAsync(identifier,content));case 6:return _context.abrupt(\"return\",_context.sent);case 7:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/presentNotificationAsync.ts"],"names":[],"mappings":"oQAAA,kDACA,0BAEA,kGAGA,GAAI,oBAAmB,CAAG,KAA1B,CAMe,QAAe,yBAAf,CACb,OADa,oKAEb,UAFa,+CAEQ,GAAA,QAAA,GAFR,CAIb,GAAI,OAAO,EAAI,CAAC,mBAAhB,CAAqC,CACnC,OAAO,CAAC,IAAR,CACE,qMADF,EAGA,mBAAmB,CAAG,IAAtB,CACD,CATY,GAWR,oCAAA,CAAsB,wBAXd,8BAYL,IAAI,qCAAJ,CAAwB,eAAxB,CAAyC,0BAAzC,CAZK,0DAeA,oCAAA,CAAsB,wBAAtB,CAA+C,UAA/C,CAA2D,OAA3D,CAfA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport NotificationPresenter from './NotificationPresenterModule';\nimport { NotificationContentInput } from './Notifications.types';\n\nlet warningMessageShown = false;\n\n/**\n * @deprecated Use `scheduleNotificationAsync` with an explicit notification handler.\n * [Read more](https://expo.fyi/presenting-notifications-deprecated).\n */\nexport default async function presentNotificationAsync(\n  content: NotificationContentInput,\n  identifier: string = uuidv4()\n): Promise<string> {\n  if (__DEV__ && !warningMessageShown) {\n    console.warn(\n      '`presentNotificationAsync` has been deprecated in favor of using `scheduleNotificationAsync` + an explicit notification handler. Read more at https://expo.fyi/presenting-notifications-deprecated.'\n    );\n    warningMessageShown = true;\n  }\n\n  if (!NotificationPresenter.presentNotificationAsync) {\n    throw new UnavailabilityError('Notifications', 'presentNotificationAsync');\n  }\n\n  return await NotificationPresenter.presentNotificationAsync(identifier, content);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}