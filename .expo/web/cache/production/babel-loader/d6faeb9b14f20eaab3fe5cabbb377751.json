{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _base=require(\"./base\");var _AnimatedBezier=_interopRequireDefault(require(\"./core/AnimatedBezier\"));var Easing=function(){function Easing(){(0,_classCallCheck2.default)(this,Easing);}(0,_createClass2.default)(Easing,null,[{key:\"linear\",value:function linear(t){return t;}},{key:\"ease\",value:function ease(t){return new _AnimatedBezier.default(t,0.42,0,1,1);}},{key:\"quad\",value:function quad(t){return(0,_base.multiply)(t,t);}},{key:\"cubic\",value:function cubic(t){return(0,_base.multiply)(t,t,t);}},{key:\"poly\",value:function poly(n){return function(t){return(0,_base.pow)(t,n);};}},{key:\"sin\",value:function sin(t){return(0,_base.sub)(1,(0,_base.cos)((0,_base.multiply)(t,Math.PI,0.5)));}},{key:\"circle\",value:function circle(t){return(0,_base.sub)(1,(0,_base.sqrt)((0,_base.sub)(1,(0,_base.multiply)(t,t))));}},{key:\"exp\",value:function exp(t){return(0,_base.pow)(2,(0,_base.multiply)(10,(0,_base.sub)(t,1)));}},{key:\"elastic\",value:function elastic(){var bounciness=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;var p=bounciness*Math.PI;return function(t){return(0,_base.sub)(1,(0,_base.multiply)((0,_base.pow)((0,_base.cos)((0,_base.multiply)(t,Math.PI,0.5)),3),(0,_base.cos)((0,_base.multiply)(t,p))));};}},{key:\"back\",value:function back(s){if(s===undefined){s=1.70158;}return function(t){return(0,_base.multiply)(t,t,(0,_base.sub)((0,_base.multiply)((0,_base.add)(s,1),t),s));};}},{key:\"bounce\",value:function bounce(t){var sq=function sq(v){return(0,_base.multiply)(7.5625,v,v);};return(0,_base.cond)((0,_base.lessThan)(t,1/2.75),sq(t),(0,_base.cond)((0,_base.lessThan)(t,2/2.75),(0,_base.add)(0.75,sq((0,_base.sub)(t,1.5/2.75))),(0,_base.cond)((0,_base.lessThan)(t,2.5/2.76),(0,_base.add)(0.9375,sq((0,_base.sub)(t,2.25/2.75))),(0,_base.add)(0.984375,sq((0,_base.sub)(t,2.625/2.75))))));}},{key:\"bezier\",value:function bezier(x1,y1,x2,y2){return function(t){return new _AnimatedBezier.default(t,x1,y1,x2,y2);};}},{key:\"in\",value:function _in(easing){return easing;}},{key:\"out\",value:function out(easing){return function(t){return(0,_base.sub)(1,easing((0,_base.sub)(1,t)));};}},{key:\"inOut\",value:function inOut(easing){return function(t){return(0,_base.cond)((0,_base.lessThan)(t,0.5),(0,_base.divide)(easing((0,_base.multiply)(t,2)),2),(0,_base.sub)(1,(0,_base.divide)(easing((0,_base.multiply)((0,_base.sub)(1,t),2)),2)));};}}]);return Easing;}();exports.default=Easing;","map":{"version":3,"names":["Easing","t","AnimatedBezier","multiply","n","pow","sub","cos","Math","PI","sqrt","bounciness","p","s","undefined","add","sq","v","cond","lessThan","x1","y1","x2","y2","easing","divide"],"sources":["D:/React_Native/SourceCode_VPM_Swine/node_modules/react-native-reanimated/lib/reanimated1/Easing.js"],"sourcesContent":["import {\n  cond,\n  lessThan,\n  multiply,\n  pow,\n  cos,\n  sqrt,\n  sub,\n  add,\n  divide,\n} from './base';\nimport AnimatedBezier from './core/AnimatedBezier';\n\n/**\n * The `Easing` module implements common easing functions. This module is used\n * by [Animate.timing()](docs/animate.html#timing) to convey physically\n * believable motion in animations.\n *\n * You can find a visualization of some common easing functions at\n * http://easings.net/\n *\n * ### Predefined animations\n *\n * The `Easing` module provides several predefined animations through the\n * following methods:\n *\n * - [`back`](docs/easing.html#back) provides a simple animation where the\n *   object goes slightly back before moving forward\n * - [`bounce`](docs/easing.html#bounce) provides a bouncing animation\n * - [`ease`](docs/easing.html#ease) provides a simple inertial animation\n * - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction\n *\n * ### Standard functions\n *\n * Three standard easing functions are provided:\n *\n * - [`linear`](docs/easing.html#linear)\n * - [`quad`](docs/easing.html#quad)\n * - [`cubic`](docs/easing.html#cubic)\n *\n * The [`poly`](docs/easing.html#poly) function can be used to implement\n * quartic, quintic, and other higher power functions.\n *\n * ### Additional functions\n *\n * Additional mathematical functions are provided by the following methods:\n *\n * - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve\n * - [`circle`](docs/easing.html#circle) provides a circular function\n * - [`sin`](docs/easing.html#sin) provides a sinusoidal function\n * - [`exp`](docs/easing.html#exp) provides an exponential function\n *\n * The following helpers are used to modify other easing functions.\n *\n * - [`in`](docs/easing.html#in) runs an easing function forwards\n * - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical\n * - [`out`](docs/easing.html#out) runs an easing function backwards\n */\nexport default class Easing {\n  /**\n   * A linear function, `f(t) = t`. Position correlates to elapsed time one to\n   * one.\n   *\n   * http://cubic-bezier.com/#0,0,1,1\n   */\n  static linear(t) {\n    return t;\n  }\n\n  /**\n   * A simple inertial interaction, similar to an object slowly accelerating to\n   * speed.\n   *\n   * http://cubic-bezier.com/#.42,0,1,1\n   */\n  static ease(t) {\n    return new AnimatedBezier(t, 0.42, 0, 1, 1);\n  }\n\n  /**\n   * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInQuad\n   */\n  static quad(t) {\n    return multiply(t, t);\n  }\n\n  /**\n   * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed\n   * time.\n   *\n   * http://easings.net/#easeInCubic\n   */\n  static cubic(t) {\n    return multiply(t, t, t);\n  }\n\n  /**\n   * A power function. Position is equal to the Nth power of elapsed time.\n   *\n   * n = 4: http://easings.net/#easeInQuart\n   * n = 5: http://easings.net/#easeInQuint\n   */\n  static poly(n) {\n    return (t) => pow(t, n);\n  }\n\n  /**\n   * A sinusoidal function.\n   *\n   * http://easings.net/#easeInSine\n   */\n  static sin(t) {\n    return sub(1, cos(multiply(t, Math.PI, 0.5)));\n  }\n\n  /**\n   * A circular function.\n   *\n   * http://easings.net/#easeInCirc\n   */\n  static circle(t) {\n    return sub(1, sqrt(sub(1, multiply(t, t))));\n  }\n\n  /**\n   * An exponential function.\n   *\n   * http://easings.net/#easeInExpo\n   */\n  static exp(t) {\n    return pow(2, multiply(10, sub(t, 1)));\n  }\n\n  /**\n   * A simple elastic interaction, similar to a spring oscillating back and\n   * forth.\n   *\n   * Default bounciness is 1, which overshoots a little bit once. 0 bounciness\n   * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N\n   * times.\n   *\n   * http://easings.net/#easeInElastic\n   */\n  static elastic(bounciness = 1) {\n    const p = bounciness * Math.PI;\n    return (t) =>\n      sub(\n        1,\n        multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))\n      );\n  }\n\n  /**\n   * Use with `Animated.parallel()` to create a simple effect where the object\n   * animates back slightly as the animation starts.\n   *\n   * Wolfram Plot:\n   *\n   * - http://tiny.cc/back_default (s = 1.70158, default)\n   */\n  static back(s) {\n    if (s === undefined) {\n      s = 1.70158;\n    }\n    return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));\n  }\n\n  /**\n   * Provides a simple bouncing effect.\n   *\n   * http://easings.net/#easeInBounce\n   */\n  static bounce(t) {\n    const sq = (v) => multiply(7.5625, v, v);\n    return cond(\n      lessThan(t, 1 / 2.75),\n      sq(t),\n      cond(\n        lessThan(t, 2 / 2.75),\n        add(0.75, sq(sub(t, 1.5 / 2.75))),\n        cond(\n          lessThan(t, 2.5 / 2.76),\n          add(0.9375, sq(sub(t, 2.25 / 2.75))),\n          add(0.984375, sq(sub(t, 2.625 / 2.75)))\n        )\n      )\n    );\n  }\n\n  /**\n   * Provides a cubic bezier curve, equivalent to CSS Transitions'\n   * `transition-timing-function`.\n   *\n   * A useful tool to visualize cubic bezier curves can be found at\n   * http://cubic-bezier.com/\n   */\n  static bezier(x1, y1, x2, y2) {\n    return (t) => new AnimatedBezier(t, x1, y1, x2, y2);\n  }\n\n  /**\n   * Runs an easing function forwards.\n   */\n  static in(easing) {\n    return easing;\n  }\n\n  /**\n   * Runs an easing function backwards.\n   */\n  static out(easing) {\n    return (t) => sub(1, easing(sub(1, t)));\n  }\n\n  /**\n   * Makes any easing function symmetrical. The easing function will run\n   * forwards for half of the duration, then backwards for the rest of the\n   * duration.\n   */\n  static inOut(easing) {\n    return (t) =>\n      cond(\n        lessThan(t, 0.5),\n        divide(easing(multiply(t, 2)), 2),\n        sub(1, divide(easing(multiply(sub(1, t), 2)), 2))\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}