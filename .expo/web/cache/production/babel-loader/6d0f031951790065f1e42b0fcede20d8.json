{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends3=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _reactNativeReanimated=_interopRequireDefault(require(\"react-native-reanimated\"));var _excluded=[\"progress\",\"style\"];function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var interpolateDeprecated=_reactNativeReanimated.default.interpolate,interpolateNode=_reactNativeReanimated.default.interpolateNode,cond=_reactNativeReanimated.default.cond,greaterThan=_reactNativeReanimated.default.greaterThan;var interpolate=interpolateNode!==null&&interpolateNode!==void 0?interpolateNode:interpolateDeprecated;var PROGRESS_EPSILON=0.05;var Overlay=React.forwardRef(function Overlay(_ref,ref){var progress=_ref.progress,style=_ref.style,props=(0,_objectWithoutProperties2.default)(_ref,_excluded);var animatedStyle={opacity:interpolate(progress,{inputRange:_reactNative.Platform.OS==='windows'||_reactNative.Platform.OS==='macos'?[0,1]:[PROGRESS_EPSILON,1],outputRange:[0,1]}),zIndex:cond(greaterThan(progress,PROGRESS_EPSILON),0,-1)};return React.createElement(_reactNativeReanimated.default.View,_extends({},props,{ref:ref,style:[styles.overlay,overlayStyle,animatedStyle,style]}));});var overlayStyle=_reactNative.Platform.select({web:{WebkitTapHighlightColor:'transparent'},default:{}});var styles=_reactNative.StyleSheet.create({overlay:(0,_extends3.default)({},_reactNative.StyleSheet.absoluteFillObject,{backgroundColor:'rgba(0, 0, 0, 0.5)'})});var _default=Overlay;exports.default=_default;","map":{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","greaterThan","interpolateNode","PROGRESS_EPSILON","Overlay","props","animatedStyle","opacity","inputRange","Platform","outputRange","zIndex","cond","styles","overlayStyle","web","WebkitTapHighlightColor","default","overlay","StyleSheet","backgroundColor"],"mappings":"mWAAA,oDACA,yCACA,sF,ozCAEA,GAAM,sBAAN,CAAA,8BAAA,CACEA,WADF,CAAM,eAAN,CAAA,8BAAA,CAAM,eAAN,CAAM,IAAN,CAAA,8BAAA,CAAM,IAAN,CAKEC,WALF,CAAA,8BAAA,CAKEA,WALF,CAQA,GAAMD,YAAyC,CAC7CE,eAD6C,GAAA,IAC7CA,EAAAA,eAD6C,GAAA,IAAA,EAC7CA,CAD6C,eAC7CA,CADF,qBAAA,CAGA,GAAMC,iBAAgB,CAAtB,IAAA,CAMA,GAAMC,QAAO,CAAG,KAAK,CAAL,UAAA,CAAiB,QAAA,QAAA,MAAA,GAAA,CAG/B,IAFA,SAEA,MAFA,QAEA,CAFA,KAEA,MAFA,KAEA,CAFsBC,KAEtB,uDACA,GAAMC,cAAa,CAAG,CACpBC,OAAO,CAAEP,WAAW,CAAA,QAAA,CAAW,CAK7BQ,UAAU,CACRC,qBAAAA,CAAAA,EAAAA,GAAAA,SAAAA,EAA6BA,qBAAAA,CAAAA,EAAAA,GAA7BA,OAAAA,CACI,CAAA,CAAA,CADJA,CACI,CADJA,CAEI,CAAA,gBAAA,CARuB,CAQvB,CARuB,CAS7BC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAA,CATgB,CAAX,CADA,CAepBC,MAAM,CAAEC,IAAI,CAACX,WAAW,CAAA,QAAA,CAAZ,gBAAY,CAAZ,CAAA,CAAA,CAA6C,CAA7C,CAAA,CAfQ,CAAtB,CAkBA,MACE,MAAA,CAAA,aAAA,CAAA,8BAAA,CAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAEE,GAAG,CAFL,GAAA,CAGE,KAAK,CAAE,CAACY,MAAM,CAAP,OAAA,CAAA,YAAA,CAAA,aAAA,CAAA,KAAA,CAHT,CAAA,CAAA,CADF,CAtBF,CAAgB,CAAhB,CA+BA,GAAMC,aAAY,CAAG,qBAAA,CAAA,MAAA,CAAwC,CAC3DC,GAAG,CAAE,CAGHC,uBAAuB,CAAE,aAHtB,CADsD,CAM3DC,OAAO,CAAE,EANkD,CAAxC,CAArB,CASA,GAAMJ,OAAM,CAAG,uBAAA,CAAA,MAAA,CAAkB,CAC/BK,OAAO,0BACFC,uBAAAA,CADI,kBAAF,EAELC,eAAe,CAAE,oBAFZ,EADwB,CAAlB,CAAf,C,aAOA,O","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-expect-error: this property is only present in Reanimated 2\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    />\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"script"}