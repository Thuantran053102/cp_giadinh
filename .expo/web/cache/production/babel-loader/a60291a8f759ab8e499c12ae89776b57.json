{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=interpolateColors;var _reactNative=require(\"react-native\");var _base=require(\"../base\");var _color=_interopRequireDefault(require(\"./color\"));var _interpolate=_interopRequireWildcard(require(\"./interpolate\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function red(c){return c>>16&255;}function green(c){return c>>8&255;}function blue(c){return c&255;}function opacity(c){return(c>>24&255)/255;}function interpolateColors(animationValue,options){var inputRange=options.inputRange,outputColorRange=options.outputColorRange;var colors=outputColorRange.map(_reactNative.processColor);var r=(0,_base.round)((0,_interpolate.default)(animationValue,{inputRange:inputRange,outputRange:colors.map(red),extrapolate:_interpolate.Extrapolate.CLAMP}));var g=(0,_base.round)((0,_interpolate.default)(animationValue,{inputRange:inputRange,outputRange:colors.map(green),extrapolate:_interpolate.Extrapolate.CLAMP}));var b=(0,_base.round)((0,_interpolate.default)(animationValue,{inputRange:inputRange,outputRange:colors.map(blue),extrapolate:_interpolate.Extrapolate.CLAMP}));var a=(0,_interpolate.default)(animationValue,{inputRange:inputRange,outputRange:colors.map(opacity),extrapolate:_interpolate.Extrapolate.CLAMP});return(0,_color.default)(r,g,b,a);}","map":{"version":3,"names":["red","c","green","blue","opacity","interpolateColors","animationValue","options","inputRange","outputColorRange","colors","map","processColor","r","round","interpolate","outputRange","extrapolate","Extrapolate","CLAMP","g","b","a","color"],"sources":["D:/React_Native/SourceCode_VPM_Swine/node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js"],"sourcesContent":["import { processColor } from 'react-native';\nimport { round } from '../base';\nimport color from './color';\nimport interpolate, { Extrapolate } from './interpolate';\n\nfunction red(c) {\n  return (c >> 16) & 255;\n}\nfunction green(c) {\n  return (c >> 8) & 255;\n}\nfunction blue(c) {\n  return c & 255;\n}\nfunction opacity(c) {\n  return ((c >> 24) & 255) / 255;\n}\n\n/**\n * Use this if you want to interpolate an `Animated.Value` into color values.\n *\n * #### Why is this needed?\n *\n * Unfortunately, if you'll pass color values directly into the `outputRange` option\n * of `interpolate()` function, that won't really work (at least at the moment).\n * See https://github.com/software-mansion/react-native-reanimated/issues/181 .\n *\n * So, for now you can just use this helper instead.\n */\nexport default function interpolateColors(animationValue, options) {\n  const { inputRange, outputColorRange } = options;\n  const colors = outputColorRange.map(processColor);\n\n  const r = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(red),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const g = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(green),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const b = round(\n    interpolate(animationValue, {\n      inputRange,\n      outputRange: colors.map(blue),\n      extrapolate: Extrapolate.CLAMP,\n    })\n  );\n  const a = interpolate(animationValue, {\n    inputRange,\n    outputRange: colors.map(opacity),\n    extrapolate: Extrapolate.CLAMP,\n  });\n\n  return color(r, g, b, a);\n}\n"],"mappings":"8KAAA,yCACA,6BACA,sDACA,mE,0/BAEA,QAASA,IAAT,CAAaC,CAAb,CAAgB,CACd,MAAQA,EAAC,EAAI,EAAN,CAAY,GAAnB,CACD,CACD,QAASC,MAAT,CAAeD,CAAf,CAAkB,CAChB,MAAQA,EAAC,EAAI,CAAN,CAAW,GAAlB,CACD,CACD,QAASE,KAAT,CAAcF,CAAd,CAAiB,CACf,MAAOA,EAAC,CAAG,GAAX,CACD,CACD,QAASG,QAAT,CAAiBH,CAAjB,CAAoB,CAClB,MAAO,CAAEA,CAAC,EAAI,EAAN,CAAY,GAAb,EAAoB,GAA3B,CACD,CAac,QAASI,kBAAT,CAA2BC,cAA3B,CAA2CC,OAA3C,CAAoD,CACjE,GAAQC,WAAR,CAAyCD,OAAzC,CAAQC,UAAR,CAAoBC,gBAApB,CAAyCF,OAAzC,CAAoBE,gBAApB,CACA,GAAMC,OAAM,CAAGD,gBAAgB,CAACE,GAAjB,CAAqBC,yBAArB,CAAf,CAEA,GAAMC,EAAC,CAAG,GAAAC,WAAA,EACR,GAAAC,oBAAA,EAAYT,cAAZ,CAA4B,CAC1BE,UAAU,CAAVA,UAD0B,CAE1BQ,WAAW,CAAEN,MAAM,CAACC,GAAP,CAAWX,GAAX,CAFa,CAG1BiB,WAAW,CAAEC,wBAAA,CAAYC,KAHC,CAA5B,CADQ,CAAV,CAOA,GAAMC,EAAC,CAAG,GAAAN,WAAA,EACR,GAAAC,oBAAA,EAAYT,cAAZ,CAA4B,CAC1BE,UAAU,CAAVA,UAD0B,CAE1BQ,WAAW,CAAEN,MAAM,CAACC,GAAP,CAAWT,KAAX,CAFa,CAG1Be,WAAW,CAAEC,wBAAA,CAAYC,KAHC,CAA5B,CADQ,CAAV,CAOA,GAAME,EAAC,CAAG,GAAAP,WAAA,EACR,GAAAC,oBAAA,EAAYT,cAAZ,CAA4B,CAC1BE,UAAU,CAAVA,UAD0B,CAE1BQ,WAAW,CAAEN,MAAM,CAACC,GAAP,CAAWR,IAAX,CAFa,CAG1Bc,WAAW,CAAEC,wBAAA,CAAYC,KAHC,CAA5B,CADQ,CAAV,CAOA,GAAMG,EAAC,CAAG,GAAAP,oBAAA,EAAYT,cAAZ,CAA4B,CACpCE,UAAU,CAAVA,UADoC,CAEpCQ,WAAW,CAAEN,MAAM,CAACC,GAAP,CAAWP,OAAX,CAFuB,CAGpCa,WAAW,CAAEC,wBAAA,CAAYC,KAHW,CAA5B,CAAV,CAMA,MAAO,GAAAI,cAAA,EAAMV,CAAN,CAASO,CAAT,CAAYC,CAAZ,CAAeC,CAAf,CAAP,CACD"},"metadata":{},"sourceType":"script"}