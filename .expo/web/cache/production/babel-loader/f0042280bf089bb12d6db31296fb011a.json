{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=setNotificationCategoryAsync;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _expoModulesCore=require(\"expo-modules-core\");var _NotificationCategoriesModule=_interopRequireDefault(require(\"./NotificationCategoriesModule.native\"));function setNotificationCategoryAsync(identifier,actions,options){return _regenerator.default.async(function setNotificationCategoryAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(_NotificationCategoriesModule.default.setNotificationCategoryAsync){_context.next=2;break;}throw new _expoModulesCore.UnavailabilityError('Notifications','setNotificationCategoryAsync');case 2:_context.next=4;return _regenerator.default.awrap(_NotificationCategoriesModule.default.setNotificationCategoryAsync(identifier,actions,options));case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}","map":{"version":3,"sources":["../src/setNotificationCategoryAsync.ts"],"names":[],"mappings":"wQAAA,kDAEA,2GAGe,QAAe,6BAAf,CACb,UADa,CAEb,OAFa,CAGb,OAHa,4IAcR,qCAAA,CAA6B,4BAdrB,8BAeL,IAAI,qCAAJ,CAAwB,eAAxB,CAAyC,8BAAzC,CAfK,0DAkBA,qCAAA,CAA6B,4BAA7B,CACX,UADW,CAEX,OAFW,CAGX,OAHW,CAlBA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationCategoriesModule from './NotificationCategoriesModule.native';\nimport { NotificationCategory, NotificationAction } from './Notifications.types';\n\nexport default async function setNotificationCategoryAsync(\n  identifier: string,\n  actions: NotificationAction[],\n  options?: {\n    previewPlaceholder?: string;\n    intentIdentifiers?: string[];\n    categorySummaryFormat?: string;\n    customDismissAction?: boolean;\n    allowInCarPlay?: boolean;\n    showTitle?: boolean;\n    showSubtitle?: boolean;\n    allowAnnouncement?: boolean;\n  }\n): Promise<NotificationCategory> {\n  if (!NotificationCategoriesModule.setNotificationCategoryAsync) {\n    throw new UnavailabilityError('Notifications', 'setNotificationCategoryAsync');\n  }\n\n  return await NotificationCategoriesModule.setNotificationCategoryAsync(\n    identifier,\n    actions,\n    options\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}