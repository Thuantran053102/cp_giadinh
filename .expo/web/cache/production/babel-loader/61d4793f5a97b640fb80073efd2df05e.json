{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useLinkProps;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _core=require(\"@react-navigation/core\");var _useLinkTo=_interopRequireDefault(require(\"./useLinkTo\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useLinkProps(_ref){var to=_ref.to,action=_ref.action;var navigation=React.useContext(_core.NavigationHelpersContext);var linkTo=(0,_useLinkTo.default)();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(_reactNative.Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object.\");}}else{if(typeof to!=='string'){throw new Error(\"To 'to' option is invalid (found '\".concat(String(to),\"'. It must be a valid string for navigation.\"));}linkTo(to);}}};return{href:to,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["action","navigation","React","linkTo","onPress","e","shouldHandle","Platform","String","href","accessibilityRole"],"mappings":"yKAAA,oDACA,yCACA,4CAIA,8D,0/BAae,QAAA,aAAA,MAA6C,IAAvB,GAAuB,MAAvB,EAAuB,CAAjBA,MAAiB,MAAjBA,MAAiB,CAC1D,GAAMC,WAAU,CAAGC,KAAK,CAALA,UAAAA,CAAnB,8BAAmBA,CAAnB,CACA,GAAMC,OAAM,CAAZ,GAAA,kBAAA,GAAA,CAEA,GAAMC,QAAO,CACXC,QADID,QACJC,CAAAA,CADc,CAEX,CAAA,GAAA,iBAAA,CACH,GAAIC,aAAY,CAAhB,KAAA,CAEA,GAAIC,qBAAAA,CAAAA,EAAAA,GAAAA,KAAAA,EAAyB,CAA7B,CAAA,CAAiC,CAC/BD,YAAY,CAAGD,CAAC,CAAG,CAACA,CAAC,CAAL,gBAAA,CAAhBC,IAAAA,CADF,CAAA,IAEO,IACL,CAACD,CAAC,CAAF,gBAAA,EAEA,EAAEA,CAAC,CAADA,OAAAA,EAAaA,CAAC,CAAdA,MAAAA,EAAyBA,CAAC,CAA1BA,OAAAA,EAAsCA,CAAC,CAFzC,QAEA,CAFA,GAICA,CAAC,CAADA,MAAAA,EAAAA,IAAAA,EAAoBA,CAAC,CAADA,MAAAA,GAJrB,CAAA,GAMA,CAAA,SAAA,CAAA,IAAA,CAAA,EAAA,CAAA,MAAA,EAAA,QAAA,CAAA,CAAA,gBAAA,CAAuCA,CAAC,CAAxC,aAAA,IAAA,IAAA,EAAA,gBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAuCA,gBAAAA,CAPlC,MAOL,CAPK,CAQL,CACAA,CAAC,CAADA,cAAAA,GACAC,YAAY,CAAZA,IAAAA,CACD,CAED,GAAA,YAAA,CAAkB,CAChB,GAAA,MAAA,CAAY,CACV,GAAA,UAAA,CAAgB,CACdL,UAAU,CAAVA,QAAAA,CAAAA,MAAAA,EADF,CAAA,IAEO,CACL,KAAM,IAAA,MAAA,CAAN,oCAAM,CAAN,CACD,CALH,CAAA,IAMO,CACL,GAAI,MAAA,GAAA,GAAJ,QAAA,CAA4B,CAC1B,KAAM,IAAA,MAAA,CAAA,qCAAA,MAAA,CACiCO,MAAM,CADvC,EACuC,CADvC,CAAN,8CAAM,CAAA,CAAN,CAKD,CAEDL,MAAM,CAANA,EAAM,CAANA,CACD,CACF,CAtCH,CAAA,CAyCA,MAAO,CACLM,IAAI,CADC,EAAA,CAELC,iBAAiB,CAFZ,MAAA,CAGLN,OAAAA,CAAAA,OAHK,CAAP,CAKD","sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}