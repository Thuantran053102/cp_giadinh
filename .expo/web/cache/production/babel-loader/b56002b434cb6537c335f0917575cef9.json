{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.usePermissions=usePermissions;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var _react=require(\"react\");var _Permissions=require(\"./Permissions\");function usePermissions(type){var options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var isMounted=(0,_react.useRef)(true);var _useState=(0,_react.useState)(),_useState2=(0,_slicedToArray2.default)(_useState,2),data=_useState2[0],setData=_useState2[1];var _options$ask=options.ask,ask=_options$ask===void 0?false:_options$ask,_options$get=options.get,get=_options$get===void 0?true:_options$get;var types=Array.isArray(type)?type:[type];var askPermissions=(0,_react.useCallback)(function(){return _Permissions.askAsync.apply(void 0,(0,_toConsumableArray2.default)(types)).then(function(response){if(isMounted.current){setData(response);}});},[type]);var getPermissions=(0,_react.useCallback)(function(){return _Permissions.getAsync.apply(void 0,(0,_toConsumableArray2.default)(types)).then(function(response){if(isMounted.current){setData(response);}});},[type]);(0,_react.useEffect)(function(){if(ask){askPermissions();}if(!ask&&get){getPermissions();}},[ask,askPermissions,get,getPermissions]);(0,_react.useEffect)(function(){isMounted.current=true;return function(){isMounted.current=false;};},[]);return[data,askPermissions,getPermissions];}","map":{"version":3,"sources":["../src/PermissionsHooks.ts"],"names":[],"mappings":"kXAAA,4BAEA,0CAmBM,QAAU,eAAV,CACJ,IADI,CAE4B,IAAhC,QAAgC,2DAAF,EAAE,CAEhC,GAAM,UAAS,CAAG,GAAA,aAAA,EAAO,IAAP,CAAlB,CACA,cAAwB,GAAA,eAAA,GAAxB,qDAAO,IAAP,eAAa,OAAb,eACA,iBAAoC,OAApC,CAAQ,GAAR,CAAQ,GAAR,uBAAc,KAAd,2BAAoC,OAApC,CAAqB,GAArB,CAAqB,GAArB,uBAA2B,IAA3B,cACA,GAAM,MAAK,CAAG,KAAK,CAAC,OAAN,CAAc,IAAd,EAAsB,IAAtB,CAA6B,CAAC,IAAD,CAA3C,CAMA,GAAM,eAAc,CAAG,GAAA,kBAAA,EACrB,iBACE,sBAAA,8CAAY,KAAZ,GAAmB,IAAnB,CAAwB,SAAC,QAAD,CAAa,CACnC,GAAI,SAAS,CAAC,OAAd,CAAuB,CACrB,OAAO,CAAC,QAAD,CAAP,CACD,CACF,CAJD,CADF,EADqB,CAOrB,CAAC,IAAD,CAPqB,CAAvB,CAUA,GAAM,eAAc,CAAG,GAAA,kBAAA,EACrB,iBACE,sBAAA,8CAAY,KAAZ,GAAmB,IAAnB,CAAwB,SAAC,QAAD,CAAa,CACnC,GAAI,SAAS,CAAC,OAAd,CAAuB,CACrB,OAAO,CAAC,QAAD,CAAP,CACD,CACF,CAJD,CADF,EADqB,CAOrB,CAAC,IAAD,CAPqB,CAAvB,CAUA,GAAA,gBAAA,EAAU,UAAK,CACb,GAAI,GAAJ,CAAS,CACP,cAAc,GACf,CAED,GAAI,CAAC,GAAD,EAAQ,GAAZ,CAAiB,CACf,cAAc,GACf,CACF,CARD,CAQG,CAAC,GAAD,CAAM,cAAN,CAAsB,GAAtB,CAA2B,cAA3B,CARH,EAUA,GAAA,gBAAA,EAAU,UAAK,CACb,SAAS,CAAC,OAAV,CAAoB,IAApB,CACA,MAAO,WAAK,CACV,SAAS,CAAC,OAAV,CAAoB,KAApB,CACD,CAFD,CAGD,CALD,CAKG,EALH,EAOA,MAAO,CAAC,IAAD,CAAO,cAAP,CAAuB,cAAvB,CAAP,CACD","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.io/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const isMounted = useRef(true);\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(\n    () =>\n      askAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  const getPermissions = useCallback(\n    () =>\n      getAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}