{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.NotificationTimeoutError=void 0;exports.setNotificationHandler=setNotificationHandler;var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _expoModulesCore=require(\"expo-modules-core\");var _NotificationsHandlerModule=_interopRequireDefault(require(\"./NotificationsHandlerModule\"));function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}var NotificationTimeoutError=function(_CodedError){(0,_inherits2.default)(NotificationTimeoutError,_CodedError);var _super=_createSuper(NotificationTimeoutError);function NotificationTimeoutError(notificationId,notification){var _this;(0,_classCallCheck2.default)(this,NotificationTimeoutError);_this=_super.call(this,'ERR_NOTIFICATION_TIMEOUT',\"Notification handling timed out for ID \"+notificationId+\".\");_this.info={id:notificationId,notification:notification};return _this;}return(0,_createClass2.default)(NotificationTimeoutError);}(_expoModulesCore.CodedError);exports.NotificationTimeoutError=NotificationTimeoutError;var notificationEmitter=new _expoModulesCore.EventEmitter(_NotificationsHandlerModule.default);var handleNotificationEventName='onHandleNotification';var handleNotificationTimeoutEventName='onHandleNotificationTimeout';var handleSubscription=null;var handleTimeoutSubscription=null;function setNotificationHandler(handler){if(handleSubscription){handleSubscription.remove();handleSubscription=null;}if(handleTimeoutSubscription){handleTimeoutSubscription.remove();handleTimeoutSubscription=null;}if(handler){handleSubscription=notificationEmitter.addListener(handleNotificationEventName,function _callee(_ref){var id,notification,behavior;return _regenerator.default.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:id=_ref.id,notification=_ref.notification;if(_NotificationsHandlerModule.default.handleNotificationAsync){_context.next=4;break;}handler.handleError==null?void 0:handler.handleError(id,new _expoModulesCore.UnavailabilityError('Notifications','handleNotificationAsync'));return _context.abrupt(\"return\");case 4:_context.prev=4;_context.next=7;return _regenerator.default.awrap(handler.handleNotification(notification));case 7:behavior=_context.sent;_context.next=10;return _regenerator.default.awrap(_NotificationsHandlerModule.default.handleNotificationAsync(id,behavior));case 10:handler.handleSuccess==null?void 0:handler.handleSuccess(id);_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](4);handler.handleError==null?void 0:handler.handleError(id,_context.t0);case 16:case\"end\":return _context.stop();}}},null,null,[[4,13]],Promise);});handleTimeoutSubscription=notificationEmitter.addListener(handleNotificationTimeoutEventName,function(_ref2){var id=_ref2.id,notification=_ref2.notification;return handler.handleError==null?void 0:handler.handleError(id,new NotificationTimeoutError(id,notification));});}}","map":{"version":3,"sources":["../src/NotificationsHandler.ts"],"names":[],"mappings":"mxBAAA,kDAGA,gG,2tBAEa,yB,sIAEX,kCAAY,cAAZ,CAAoC,YAApC,CAA8D,uEAC5D,uBAAM,0BAAN,2CAA4E,cAA5E,MACA,MAAK,IAAL,CAAY,CAAE,EAAE,CAAE,cAAN,CAAsB,YAAY,CAAZ,YAAtB,CAAZ,CAF4D,aAG7D,C,4DAL2C,2B,4DAwB9C,GAAM,oBAAmB,CAAG,GAAI,8BAAJ,CAAiB,mCAAjB,CAA5B,CAEA,GAAM,4BAA2B,CAAG,sBAApC,CACA,GAAM,mCAAkC,CAAG,6BAA3C,CAEA,GAAI,mBAAkB,CAAwB,IAA9C,CACA,GAAI,0BAAyB,CAAwB,IAArD,CAEM,QAAU,uBAAV,CAAiC,OAAjC,CAAoE,CACxE,GAAI,kBAAJ,CAAwB,CACtB,kBAAkB,CAAC,MAAnB,GACA,kBAAkB,CAAG,IAArB,CACD,CACD,GAAI,yBAAJ,CAA+B,CAC7B,yBAAyB,CAAC,MAA1B,GACA,yBAAyB,CAAG,IAA5B,CACD,CAED,GAAI,OAAJ,CAAa,CACX,kBAAkB,CAAG,mBAAmB,CAAC,WAApB,CACnB,2BADmB,CAEnB,sKAAS,EAAT,MAAS,EAAT,CAAa,YAAb,MAAa,YAAb,IACO,mCAAA,CAA2B,uBADlC,yBAEI,OAAO,CAAC,WAAR,cAAA,OAAO,CAAC,WAAR,CACE,EADF,CAEE,GAAI,qCAAJ,CAAwB,eAAxB,CAAyC,yBAAzC,CAFF,EAFJ,0GAU2B,OAAO,CAAC,kBAAR,CAA2B,YAA3B,CAV3B,SAUU,QAVV,kEAWU,mCAAA,CAA2B,uBAA3B,CAAmD,EAAnD,CAAuD,QAAvD,CAXV,UAYI,OAAO,CAAC,aAAR,cAAA,OAAO,CAAC,aAAR,CAAwB,EAAxB,EAZJ,iFAcI,OAAO,CAAC,WAAR,cAAA,OAAO,CAAC,WAAR,CAAsB,EAAtB,cAdJ,0EAFmB,CAArB,CAqBA,yBAAyB,CAAG,mBAAmB,CAAC,WAApB,CAC1B,kCAD0B,CAE1B,mBAAG,GAAH,OAAG,EAAH,CAAO,YAAP,OAAO,YAAP,OACE,QAAO,CAAC,WADV,cACE,OAAO,CAAC,WAAR,CAAsB,EAAtB,CAA0B,GAAI,yBAAJ,CAA6B,EAA7B,CAAiC,YAAjC,CAA1B,CADF,EAF0B,CAA5B,CAKD,CACF","sourcesContent":["import { EventEmitter, Subscription, CodedError, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationBehavior } from './Notifications.types';\nimport NotificationsHandlerModule from './NotificationsHandlerModule';\n\nexport class NotificationTimeoutError extends CodedError {\n  info: { notification: Notification; id: string };\n  constructor(notificationId: string, notification: Notification) {\n    super('ERR_NOTIFICATION_TIMEOUT', `Notification handling timed out for ID ${notificationId}.`);\n    this.info = { id: notificationId, notification };\n  }\n}\n\nexport type NotificationHandlingError = NotificationTimeoutError | Error;\n\nexport interface NotificationHandler {\n  handleNotification: (notification: Notification) => Promise<NotificationBehavior>;\n  handleSuccess?: (notificationId: string) => void;\n  handleError?: (notificationId: string, error: NotificationHandlingError) => void;\n}\n\ntype HandleNotificationEvent = {\n  id: string;\n  notification: Notification;\n};\n\ntype HandleNotificationTimeoutEvent = HandleNotificationEvent;\n\n// Web uses SyntheticEventEmitter\nconst notificationEmitter = new EventEmitter(NotificationsHandlerModule);\n\nconst handleNotificationEventName = 'onHandleNotification';\nconst handleNotificationTimeoutEventName = 'onHandleNotificationTimeout';\n\nlet handleSubscription: Subscription | null = null;\nlet handleTimeoutSubscription: Subscription | null = null;\n\nexport function setNotificationHandler(handler: NotificationHandler | null): void {\n  if (handleSubscription) {\n    handleSubscription.remove();\n    handleSubscription = null;\n  }\n  if (handleTimeoutSubscription) {\n    handleTimeoutSubscription.remove();\n    handleTimeoutSubscription = null;\n  }\n\n  if (handler) {\n    handleSubscription = notificationEmitter.addListener<HandleNotificationEvent>(\n      handleNotificationEventName,\n      async ({ id, notification }) => {\n        if (!NotificationsHandlerModule.handleNotificationAsync) {\n          handler.handleError?.(\n            id,\n            new UnavailabilityError('Notifications', 'handleNotificationAsync')\n          );\n          return;\n        }\n\n        try {\n          const behavior = await handler.handleNotification(notification);\n          await NotificationsHandlerModule.handleNotificationAsync(id, behavior);\n          handler.handleSuccess?.(id);\n        } catch (error) {\n          handler.handleError?.(id, error);\n        }\n      }\n    );\n\n    handleTimeoutSubscription = notificationEmitter.addListener<HandleNotificationTimeoutEvent>(\n      handleNotificationTimeoutEventName,\n      ({ id, notification }) =>\n        handler.handleError?.(id, new NotificationTimeoutError(id, notification))\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}