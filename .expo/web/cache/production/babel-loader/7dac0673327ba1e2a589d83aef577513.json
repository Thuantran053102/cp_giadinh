{"ast":null,"code":"Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=mergeComponentAndThemeStyles;var _=_interopRequireWildcard(require(\"lodash\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function mergeComponentAndThemeStyles(componentStyle,themeComponentStyle,themeStyle){var componentThemedStyle=_.merge({},componentStyle,themeComponentStyle);var intersectedRootThemeStyle=_.pick(themeStyle,_.keys(componentThemedStyle));return _.merge({},intersectedRootThemeStyle,componentThemedStyle);}","map":{"version":3,"names":["mergeComponentAndThemeStyles","componentStyle","themeComponentStyle","themeStyle","componentThemedStyle","_","merge","intersectedRootThemeStyle","pick","keys"],"sources":["D:/React_Native/SourceCode_VPM_Swine/node_modules/native-base-shoutem-theme/src/mergeComponentAndThemeStyles.js"],"sourcesContent":["import * as _ from 'lodash';\n\nexport default function mergeComponentAndThemeStyles(\n  componentStyle, themeComponentStyle, themeStyle) {\n  const componentThemedStyle = _.merge({}, componentStyle, themeComponentStyle);\n\n  // Picking only required root theme style, used by component.\n  // We do not want to merge whole theme to component style.\n  const intersectedRootThemeStyle = _.pick(themeStyle, _.keys(componentThemedStyle));\n\n  // Merging only common style, not all theme style with component style\n  return _.merge({}, intersectedRootThemeStyle, componentThemedStyle);\n}\n"],"mappings":"sGAAA,iD,0/BAEe,QAASA,6BAAT,CACbC,cADa,CACGC,mBADH,CACwBC,UADxB,CACoC,CACjD,GAAMC,qBAAoB,CAAGC,CAAC,CAACC,KAAF,CAAQ,EAAR,CAAYL,cAAZ,CAA4BC,mBAA5B,CAA7B,CAIA,GAAMK,0BAAyB,CAAGF,CAAC,CAACG,IAAF,CAAOL,UAAP,CAAmBE,CAAC,CAACI,IAAF,CAAOL,oBAAP,CAAnB,CAAlC,CAGA,MAAOC,EAAC,CAACC,KAAF,CAAQ,EAAR,CAAYC,yBAAZ,CAAuCH,oBAAvC,CAAP,CACD"},"metadata":{},"sourceType":"script"}