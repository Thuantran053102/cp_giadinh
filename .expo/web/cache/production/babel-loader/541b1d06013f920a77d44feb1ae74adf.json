{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _extends3=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _native=require(\"@react-navigation/native\");var _StackView=_interopRequireDefault(require(\"../views/Stack/StackView\"));var _excluded=[\"initialRouteName\",\"children\",\"screenOptions\"];function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function StackNavigator(_ref){var initialRouteName=_ref.initialRouteName,children=_ref.children,screenOptions=_ref.screenOptions,rest=(0,_objectWithoutProperties2.default)(_ref,_excluded);var defaultOptions={gestureEnabled:_reactNative.Platform.OS==='ios',animationEnabled:_reactNative.Platform.OS!=='web'&&_reactNative.Platform.OS!=='windows'&&_reactNative.Platform.OS!=='macos'};var _useNavigationBuilder=(0,_native.useNavigationBuilder)(_native.StackRouter,{initialRouteName:initialRouteName,children:children,screenOptions:typeof screenOptions==='function'?function(){return(0,_extends3.default)({},defaultOptions,screenOptions.apply(void 0,arguments));}:(0,_extends3.default)({},defaultOptions,screenOptions)}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation;React.useEffect(function(){var _navigation$addListen;return(_navigation$addListen=navigation.addListener)===null||_navigation$addListen===void 0?void 0:_navigation$addListen.call(navigation,'tabPress',function(e){var isFocused=navigation.isFocused();requestAnimationFrame(function(){if(state.index>0&&isFocused&&!e.defaultPrevented){navigation.dispatch((0,_extends3.default)({},_native.StackActions.popToTop(),{target:state.key}));}});});},[navigation,state.index,state.key]);return React.createElement(_StackView.default,_extends({},rest,{state:state,descriptors:descriptors,navigation:navigation}));}var _default=(0,_native.createNavigatorFactory)(StackNavigator);exports.default=_default;","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","defaultOptions","gestureEnabled","Platform","animationEnabled","navigation","useNavigationBuilder","initialRouteName","children","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":"mWAAA,oDACA,yCACA,gDAYA,2E,+0CAWA,QAAA,eAAA,MAKU,IALc,iBAKd,MALc,gBAKd,CALc,QAKd,MALc,QAKd,CALc,aAKd,MALc,aAKd,CADLA,IACK,uDACR,GAAMC,eAAc,CAAG,CACrBC,cAAc,CAAEC,qBAAAA,CAAAA,EAAAA,GADK,KAAA,CAErBC,gBAAgB,CACdD,qBAAAA,CAAAA,EAAAA,GAAAA,KAAAA,EACAA,qBAAAA,CAAAA,EAAAA,GADAA,SAAAA,EAEAA,qBAAAA,CAAAA,EAAAA,GAAgB,OALG,CAAvB,CAQA,0BAA2CG,GAAAA,4BAAAA,EAAoB,mBAApBA,CAM5B,CACbC,gBADa,CACbA,gBADa,CAEbC,QAFa,CAEbA,QAFa,CAGbC,aAAa,CACX,MAAA,cAAA,GAAA,UAAA,CACI,0CAAc,cAAd,CAEKA,aAAa,MAAbA,kBAFL,GADJ,0BAKI,cALJ,CAOSA,aAPT,CAJW,CAN4BH,CAA3C,CAAM,KAAN,uBAAM,KAAN,CAAM,WAAN,uBAAM,WAAN,CAA4BD,UAA5B,uBAA4BA,UAA5B,CAqBAK,KAAK,CAALA,SAAAA,CACE,UAAA,CAAA,GAAA,sBAAA,CAAA,MAAA,CAAA,qBAAA,CACEL,UAAU,CADZ,WAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CAAU,UAAVA,CAAsCM,SAAAA,CAAD,CAAO,CAC1C,GAAMC,UAAS,CAAGP,UAAU,CADc,SACxBA,EAAlB,CAIAQ,qBAAqB,CAAC,UAAM,CAC1B,GACEC,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAEA,CAAEH,CAAD,CAHH,gBAAA,CAIE,CAGAN,UAAU,CAAVA,QAAAA,0BACKU,oBAAAA,CADe,QACfA,EADLV,EAEEW,MAAM,CAAEF,KAAK,CAACG,GAFhBZ,IAID,CAZHQ,CAAqB,CAArBA,CANJ,CACER,CADF,CADFK,CAAAA,CAsBE,CAAA,UAAA,CAAaI,KAAK,CAAlB,KAAA,CAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA,EAyBA,MACE,MAAA,CAAA,aAAA,CAAA,kBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAFP,KAAA,CAGE,WAAW,CAHb,WAAA,CAIE,UAAU,CAAEL,UAJd,CAAA,CAAA,CADF,CAQD,C,aAEca,GAAAA,8BAAAA,EAAf,cAAeA,C","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"script"}