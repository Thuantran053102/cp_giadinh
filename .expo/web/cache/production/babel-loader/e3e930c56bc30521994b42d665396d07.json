{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useIsKeyboardShown;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useIsKeyboardShown(){var _React$useState=React.useState(false),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),isKeyboardShown=_React$useState2[0],setIsKeyboardShown=_React$useState2[1];React.useEffect(function(){var handleKeyboardShow=function handleKeyboardShow(){return setIsKeyboardShown(true);};var handleKeyboardHide=function handleKeyboardHide(){return setIsKeyboardShown(false);};if(_reactNative.Platform.OS==='ios'){_reactNative.Keyboard.addListener('keyboardWillShow',handleKeyboardShow);_reactNative.Keyboard.addListener('keyboardWillHide',handleKeyboardHide);}else{_reactNative.Keyboard.addListener('keyboardDidShow',handleKeyboardShow);_reactNative.Keyboard.addListener('keyboardDidHide',handleKeyboardHide);}return function(){if(_reactNative.Platform.OS==='ios'){_reactNative.Keyboard.removeListener('keyboardWillShow',handleKeyboardShow);_reactNative.Keyboard.removeListener('keyboardWillHide',handleKeyboardHide);}else{_reactNative.Keyboard.removeListener('keyboardDidShow',handleKeyboardShow);_reactNative.Keyboard.removeListener('keyboardDidHide',handleKeyboardHide);}};},[]);return isKeyboardShown;}","map":{"version":3,"sources":["useIsKeyboardShown.tsx"],"names":["React","handleKeyboardShow","setIsKeyboardShown","handleKeyboardHide","Platform","Keyboard"],"mappings":"2QAAA,oDACA,yC,0/BAEe,QAAA,mBAAA,EAA8B,CAC3C,oBAA8CA,KAAK,CAALA,QAAAA,CAA9C,KAA8CA,CAA9C,iEAAM,eAAN,qBAAM,kBAAN,qBAEAA,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,SAAMC,mBAAkB,CAAnD,IAAmD,CAAxB,EAA3B,CACA,GAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,SAAMD,mBAAkB,CAAnD,KAAmD,CAAxB,EAA3B,CAEA,GAAIE,qBAAAA,CAAAA,EAAAA,GAAJ,KAAA,CAA2B,CACzBC,qBAAAA,CAAAA,WAAAA,CAAAA,kBAAAA,CAAAA,kBAAAA,EACAA,qBAAAA,CAAAA,WAAAA,CAAAA,kBAAAA,CAAAA,kBAAAA,EAFF,CAAA,IAGO,CACLA,qBAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,CAAAA,kBAAAA,EACAA,qBAAAA,CAAAA,WAAAA,CAAAA,iBAAAA,CAAAA,kBAAAA,EACD,CAED,MAAO,WAAM,CACX,GAAID,qBAAAA,CAAAA,EAAAA,GAAJ,KAAA,CAA2B,CACzBC,qBAAAA,CAAAA,cAAAA,CAAAA,kBAAAA,CAAAA,kBAAAA,EACAA,qBAAAA,CAAAA,cAAAA,CAAAA,kBAAAA,CAAAA,kBAAAA,EAFF,CAAA,IAGO,CACLA,qBAAAA,CAAAA,cAAAA,CAAAA,iBAAAA,CAAAA,kBAAAA,EACAA,qBAAAA,CAAAA,cAAAA,CAAAA,iBAAAA,CAAAA,kBAAAA,EACD,CAPH,CAAA,CAZFL,CAAAA,CAAAA,EAAAA,EAuBA,MAAA,gBAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"]},"metadata":{},"sourceType":"script"}