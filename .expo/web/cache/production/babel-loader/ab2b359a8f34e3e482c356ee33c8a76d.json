{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useIsFocused;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var React=_interopRequireWildcard(require(\"react\"));var _useNavigation=_interopRequireDefault(require(\"./useNavigation\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useIsFocused(){var navigation=(0,_useNavigation.default)();var _useState=(0,React.useState)(navigation.isFocused),_useState2=(0,_slicedToArray2.default)(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(function(){var unsubscribeFocus=navigation.addListener('focus',function(){return setIsFocused(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return setIsFocused(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["navigation","useState","valueToReturn","isFocused","setIsFocused","React","unsubscribeFocus","unsubscribeBlur"],"mappings":"qQAAA,oDAEA,sE,0/BAMe,QAAA,aAAA,EAAiC,CAC9C,GAAMA,WAAU,CAAhB,GAAA,sBAAA,GAAA,CACA,cAAkCC,GAAAA,cAAAA,EAASD,UAAU,CAArD,SAAkCC,CAAlC,qDAAM,SAAN,eAAM,YAAN,eAEA,GAAMC,cAAa,CAAGF,UAAU,CAAhC,SAAsBA,EAAtB,CAEA,GAAIG,SAAS,GAAb,aAAA,CAAiC,CAM/BC,YAAY,CAAZA,aAAY,CAAZA,CACD,CAEDC,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,iBAAgB,CAAGN,UAAU,CAAVA,WAAAA,CAAAA,OAAAA,CAAgC,iBACvDI,aAAY,CADd,IACc,CAD2C,EAAhCJ,CAAzB,CAIA,GAAMO,gBAAe,CAAGP,UAAU,CAAVA,WAAAA,CAAAA,MAAAA,CAA+B,iBACrDI,aAAY,CADd,KACc,CADyC,EAA/BJ,CAAxB,CAIA,MAAO,WAAM,CACXM,gBAAgB,GAChBC,eAAe,GAFjB,CAAA,CATFF,CAAAA,CAaG,CAbHA,UAaG,CAbHA,EAeAA,KAAK,CAALA,aAAAA,CAAAA,aAAAA,EAEA,MAAA,cAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]},"metadata":{},"sourceType":"script"}