{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.nativeViewProps=exports.nativeViewGestureHandlerProps=exports.NativeViewGestureHandler=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _createHandler=_interopRequireDefault(require(\"./createHandler\"));var _gestureHandlerCommon=require(\"./gestureHandlerCommon\");var nativeViewGestureHandlerProps=['shouldActivateOnStart','disallowInterruption'];exports.nativeViewGestureHandlerProps=nativeViewGestureHandlerProps;var nativeViewProps=[].concat((0,_toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps),nativeViewGestureHandlerProps);exports.nativeViewProps=nativeViewProps;var NativeViewGestureHandler=(0,_createHandler.default)({name:'NativeViewGestureHandler',allowedProps:nativeViewProps,config:{}});exports.NativeViewGestureHandler=NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["nativeViewGestureHandlerProps","nativeViewProps","NativeViewGestureHandler","createHandler","name","allowedProps","config"],"mappings":"sVAAA,sEACA,4DAKO,GAAMA,8BAA6B,CAAG,CAAA,uBAAA,CAAtC,sBAAsC,CAAtC,C,oEAgCA,GAAMC,gBAAe,2CAAG,6CAAH,EAArB,6BAAqB,CAArB,C,wCAOA,GAAMC,yBAAwB,CAAGC,GAAAA,sBAAAA,EAGtC,CACAC,IAAI,CADJ,0BAAA,CAEAC,YAAY,CAFZ,eAAA,CAGAC,MAAM,CAAE,EAHR,CAHsCH,CAAjC,C","sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport type NativeViewGestureHandlerPayload = {\n  /**\n   * True if gesture was performed inside of containing view, false otherwise.\n   */\n  pointerInside: boolean;\n};\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: 'NativeViewGestureHandler',\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"]},"metadata":{},"sourceType":"script"}