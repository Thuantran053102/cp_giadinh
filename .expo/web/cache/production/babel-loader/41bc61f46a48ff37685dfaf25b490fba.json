{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.PanGesture=void 0;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _get2=_interopRequireDefault(require(\"@babel/runtime/helpers/get\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _gesture=require(\"./gesture\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function changeEventCalculator(current,previous){'worklet';var changePayload;if(previous===undefined){changePayload={changeX:current.translationX,changeY:current.translationY};}else{changePayload={changeX:current.translationX-previous.translationX,changeY:current.translationY-previous.translationY};}return(0,_extends2.default)({},current,changePayload);}var PanGesture=function(_ContinousBaseGesture){(0,_inherits2.default)(PanGesture,_ContinousBaseGesture);var _super=_createSuper(PanGesture);function PanGesture(){var _this;(0,_classCallCheck2.default)(this,PanGesture);_this=_super.call(this);_defineProperty((0,_assertThisInitialized2.default)(_this),\"config\",{});_this.handlerName='PanGestureHandler';return _this;}(0,_createClass2.default)(PanGesture,[{key:\"activeOffsetY\",value:function activeOffsetY(offset){if(Array.isArray(offset)){this.config.activeOffsetYStart=offset[0];this.config.activeOffsetYEnd=offset[1];}else if(offset<0){this.config.activeOffsetYStart=offset;}else{this.config.activeOffsetYEnd=offset;}return this;}},{key:\"activeOffsetX\",value:function activeOffsetX(offset){if(Array.isArray(offset)){this.config.activeOffsetXStart=offset[0];this.config.activeOffsetXEnd=offset[1];}else if(offset<0){this.config.activeOffsetXStart=offset;}else{this.config.activeOffsetXEnd=offset;}return this;}},{key:\"failOffsetY\",value:function failOffsetY(offset){if(Array.isArray(offset)){this.config.failOffsetYStart=offset[0];this.config.failOffsetYEnd=offset[1];}else if(offset<0){this.config.failOffsetYStart=offset;}else{this.config.failOffsetYEnd=offset;}return this;}},{key:\"failOffsetX\",value:function failOffsetX(offset){if(Array.isArray(offset)){this.config.failOffsetXStart=offset[0];this.config.failOffsetXEnd=offset[1];}else if(offset<0){this.config.failOffsetXStart=offset;}else{this.config.failOffsetXEnd=offset;}return this;}},{key:\"minPointers\",value:function minPointers(_minPointers){this.config.minPointers=_minPointers;return this;}},{key:\"maxPointers\",value:function maxPointers(_maxPointers){this.config.maxPointers=_maxPointers;return this;}},{key:\"minDistance\",value:function minDistance(distance){this.config.minDist=distance;return this;}},{key:\"minVelocity\",value:function minVelocity(velocity){this.config.minVelocity=velocity;return this;}},{key:\"minVelocityX\",value:function minVelocityX(velocity){this.config.minVelocityX=velocity;return this;}},{key:\"minVelocityY\",value:function minVelocityY(velocity){this.config.minVelocityY=velocity;return this;}},{key:\"averageTouches\",value:function averageTouches(value){this.config.avgTouches=value;return this;}},{key:\"enableTrackpadTwoFingerGesture\",value:function enableTrackpadTwoFingerGesture(value){this.config.enableTrackpadTwoFingerGesture=value;return this;}},{key:\"onChange\",value:function onChange(callback){this.handlers.changeEventCalculator=changeEventCalculator;return(0,_get2.default)((0,_getPrototypeOf2.default)(PanGesture.prototype),\"onChange\",this).call(this,callback);}}]);return PanGesture;}(_gesture.ContinousBaseGesture);exports.PanGesture=PanGesture;","map":{"version":3,"sources":["panGesture.ts"],"names":["previous","changePayload","changeX","current","changeY","translationY","constructor","activeOffsetY","Array","offset","activeOffsetX","failOffsetY","failOffsetX","minPointers","maxPointers","minDistance","minVelocity","minVelocityX","minVelocityY","averageTouches","enableTrackpadTwoFingerGesture","onChange"],"mappings":"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","sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\ntype PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]},"metadata":{},"sourceType":"script"}