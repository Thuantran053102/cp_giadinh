{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=Link;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _useLinkProps=_interopRequireDefault(require(\"./useLinkProps\"));var _excluded=[\"to\",\"action\"];function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function Link(_ref){var to=_ref.to,action=_ref.action,rest=(0,_objectWithoutProperties2.default)(_ref,_excluded);var props=(0,_useLinkProps.default)({to:to,action:action});var onPress=function onPress(e){if('onPress'in rest){var _rest$onPress;(_rest$onPress=rest.onPress)===null||_rest$onPress===void 0?void 0:_rest$onPress.call(rest,e);}props.onPress(e);};return React.createElement(_reactNative.Text,(0,_extends2.default)({},props,rest,_reactNative.Platform.select({web:{onClick:onPress},default:{onPress:onPress}})));}","map":{"version":3,"sources":["Link.tsx"],"names":["rest","props","useLinkProps","to","action","onPress","e","web","onClick","default"],"mappings":"iWAAA,oDACA,yCAEA,oE,whCAmBe,QAAA,KAAA,MAA8C,IAAhC,GAAgC,MAAhC,EAAgC,CAAhC,MAAgC,MAAhC,MAAgC,CAAfA,IAAe,uDAC3D,GAAMC,MAAK,CAAGC,GAAAA,qBAAAA,EAAa,CAAEC,EAAF,CAAEA,EAAF,CAAMC,MAAAA,CAAAA,MAAN,CAAbF,CAAd,CAEA,GAAMG,QAAO,CACXC,QADID,QACJC,CAAAA,CADc,CAEX,CACH,GAAI,WAAJ,KAAA,CAAuB,CAAA,GAAA,cAAA,CACrB,CAAA,aAAA,CAAA,IAAI,CAAJ,OAAA,IAAA,IAAA,EAAA,aAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CACD,CAEDL,KAAK,CAALA,OAAAA,CAAAA,CAAAA,EAPF,CAAA,CAUA,MAAO,MAAK,CAAL,aAAA,CAAA,iBAAA,0BAA0B,KAA1B,CAA0B,IAA1B,CAGF,qBAAA,CAAA,MAAA,CAAgB,CACjBM,GAAG,CAAE,CAAEC,OAAO,CAAEH,OAAX,CADY,CAEjBI,OAAO,CAAE,CAAEJ,OAAAA,CAAAA,OAAF,CAFQ,CAAhB,CAHE,EAAP,CAQD","sourcesContent":["import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"script"}