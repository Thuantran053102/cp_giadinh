{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createHandler;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _defineProperty3=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _isEqual=_interopRequireDefault(require(\"lodash/isEqual\"));var _RNGestureHandlerModule=_interopRequireDefault(require(\"../RNGestureHandlerModule\"));var _State=require(\"../State\");var _handlersRegistry=require(\"./handlersRegistry\");var _gestureHandlerCommon=require(\"./gestureHandlerCommon\");var _stateToPropMappings;function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}var _UIManagerAny$getView,_UIManagerAny$getView2,_UIManagerAny$getCons;function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var UIManagerAny=_reactNative.UIManager;var customGHEventsConfig={onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};UIManagerAny.genericDirectEventTypes=(0,_extends2.default)({},UIManagerAny.genericDirectEventTypes,customGHEventsConfig);var UIManagerConstants=(_UIManagerAny$getView=(_UIManagerAny$getView2=UIManagerAny.getViewManagerConfig)===null||_UIManagerAny$getView2===void 0?void 0:_UIManagerAny$getView2.call(UIManagerAny,'getConstants'))!==null&&_UIManagerAny$getView!==void 0?_UIManagerAny$getView:(_UIManagerAny$getCons=UIManagerAny.getConstants)===null||_UIManagerAny$getCons===void 0?void 0:_UIManagerAny$getCons.call(UIManagerAny);if(UIManagerConstants){UIManagerConstants.genericDirectEventTypes=(0,_extends2.default)({},UIManagerConstants.genericDirectEventTypes,customGHEventsConfig);}var _UIManagerAny$setJSRe=UIManagerAny.setJSResponder,oldSetJSResponder=_UIManagerAny$setJSRe===void 0?function(){}:_UIManagerAny$setJSRe,_UIManagerAny$clearJS=UIManagerAny.clearJSResponder,oldClearJSResponder=_UIManagerAny$clearJS===void 0?function(){}:_UIManagerAny$clearJS;UIManagerAny.setJSResponder=function(tag,blockNativeResponder){_RNGestureHandlerModule.default.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManagerAny.clearJSResponder=function(){_RNGestureHandlerModule.default.handleClearJSResponder();oldClearJSResponder();};var allowTouches=true;var DEV_ON_ANDROID=__DEV__&&_reactNative.Platform.OS==='android';if(DEV_ON_ANDROID){_reactNative.DeviceEventEmitter.addListener('toggleElementInspector',function(){allowTouches=!allowTouches;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(_stateToPropMappings={},(0,_defineProperty3.default)(_stateToPropMappings,_State.State.UNDETERMINED,undefined),(0,_defineProperty3.default)(_stateToPropMappings,_State.State.BEGAN,'onBegan'),(0,_defineProperty3.default)(_stateToPropMappings,_State.State.FAILED,'onFailed'),(0,_defineProperty3.default)(_stateToPropMappings,_State.State.CANCELLED,'onCancelled'),(0,_defineProperty3.default)(_stateToPropMappings,_State.State.ACTIVE,'onActivated'),(0,_defineProperty3.default)(_stateToPropMappings,_State.State.END,'onEnded'),_stateToPropMappings);function createHandler(_ref){var name=_ref.name,_ref$allowedProps=_ref.allowedProps,allowedProps=_ref$allowedProps===void 0?[]:_ref$allowedProps,_ref$config=_ref.config,config=_ref$config===void 0?{}:_ref$config,transformProps=_ref.transformProps,_ref$customNativeProp=_ref.customNativeProps,customNativeProps=_ref$customNativeProp===void 0?[]:_ref$customNativeProp;var Handler=function(_React$Component){(0,_inherits2.default)(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;(0,_classCallCheck2.default)(this,Handler);_this=_super.call(this,props);_defineProperty((0,_assertThisInitialized2.default)(_this),\"handlerTag\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"config\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"propsRef\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"viewNode\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"viewTag\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"updateEnqueued\",null);_defineProperty((0,_assertThisInitialized2.default)(_this),\"inspectorToggleListener\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"onGestureHandlerEvent\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){var _this$props$onGesture,_this$props;(_this$props$onGesture=(_this$props=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props,event);}else{var _this$props$onGesture2,_this$props2;(_this$props$onGesture2=(_this$props2=_this.props).onGestureHandlerEvent)===null||_this$props$onGesture2===void 0?void 0:_this$props$onGesture2.call(_this$props2,event);}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"onGestureHandlerStateChange\",function(event){if(event.nativeEvent.handlerTag===_this.handlerTag){var _this$props$onHandler,_this$props3;(_this$props$onHandler=(_this$props3=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props3,event);var state=event.nativeEvent.state;var stateEventName=stateToPropMappings[state];var eventHandler=stateEventName&&_this.props[stateEventName];if(eventHandler&&typeof eventHandler==='function'){eventHandler(event);}}else{var _this$props$onGesture3,_this$props4;(_this$props$onGesture3=(_this$props4=_this.props).onGestureHandlerStateChange)===null||_this$props$onGesture3===void 0?void 0:_this$props$onGesture3.call(_this$props4,event);}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"refHandler\",function(node){_this.viewNode=node;var child=React.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"createGestureHandler\",function(newConfig){_this.config=newConfig;_RNGestureHandlerModule.default.createGestureHandler(name,_this.handlerTag,newConfig);});_defineProperty((0,_assertThisInitialized2.default)(_this),\"attachGestureHandler\",function(newViewTag){_this.viewTag=newViewTag;if(_reactNative.Platform.OS==='web'){_RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag,newViewTag,false,_this.propsRef);}else{_RNGestureHandlerModule.default.attachGestureHandler(_this.handlerTag,newViewTag,false);}});_defineProperty((0,_assertThisInitialized2.default)(_this),\"updateGestureHandler\",function(newConfig){_this.config=newConfig;_RNGestureHandlerModule.default.updateGestureHandler(_this.handlerTag,newConfig);});_this.handlerTag=(0,_handlersRegistry.getNextHandlerTag)();_this.config={};_this.propsRef=React.createRef();_this.state={allowTouches:allowTouches};if(props.id){if(_handlersRegistry.handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\"+props.id+\"\\\" already registered\");}_handlersRegistry.handlerIDToTag[props.id]=_this.handlerTag;}return _this;}(0,_createClass2.default)(Handler,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var props=this.props;if(DEV_ON_ANDROID){this.inspectorToggleListener=_reactNative.DeviceEventEmitter.addListener('toggleElementInspector',function(){_this2.setState(function(_){return{allowTouches:allowTouches};});_this2.update();});}if(hasUnresolvedRefs(props)){this.updateEnqueued=setImmediate(function(){_this2.updateEnqueued=null;_this2.update();});}this.createGestureHandler((0,_gestureHandlerCommon.filterConfig)(transformProps?transformProps(this.props):this.props,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config));this.attachGestureHandler((0,_gestureHandlerCommon.findNodeHandle)(this.viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=(0,_gestureHandlerCommon.findNodeHandle)(this.viewNode);if(this.viewTag!==viewTag){this.attachGestureHandler(viewTag);}this.update();}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){var _this$inspectorToggle;(_this$inspectorToggle=this.inspectorToggleListener)===null||_this$inspectorToggle===void 0?void 0:_this$inspectorToggle.remove();_RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);if(this.updateEnqueued){clearImmediate(this.updateEnqueued);}var handlerID=this.props.id;if(handlerID){delete _handlersRegistry.handlerIDToTag[handlerID];}}},{key:\"update\",value:function update(){var newConfig=(0,_gestureHandlerCommon.filterConfig)(transformProps?transformProps(this.props):this.props,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config);if(!(0,_isEqual.default)(this.config,newConfig)){this.updateGestureHandler(newConfig);}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=(0,_extends2.default)({},this.props,updates);var newConfig=(0,_gestureHandlerCommon.filterConfig)(transformProps?transformProps(mergedProps):mergedProps,[].concat((0,_toConsumableArray2.default)(allowedProps),(0,_toConsumableArray2.default)(customNativeProps)),config);this.updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var gestureEventHandler=this.onGestureHandlerEvent;var _this$props5=this.props,onGestureEvent=_this$props5.onGestureEvent,onGestureHandlerEvent=_this$props5.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this.onGestureHandlerStateChange;var _this$props6=this.props,onHandlerStateChange=_this$props6.onHandlerStateChange,onGestureHandlerStateChange=_this$props6.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var events={onGestureHandlerEvent:this.state.allowTouches?gestureEventHandler:undefined,onGestureHandlerStateChange:this.state.allowTouches?gestureStateEventHandler:undefined};this.propsRef.current=events;var child=React.Children.only(this.props.children);var grandChildren=child.props.children;if(_reactNative.Touchable.TOUCH_TARGET_DEBUG&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=React.Children.toArray(grandChildren);grandChildren.push(_reactNative.Touchable.renderDebugView({color:'mediumspringgreen',hitSlop:child.props.hitSlop}));}return React.cloneElement(child,(0,_extends2.default)({ref:this.refHandler,collapsable:false},events),grandChildren);}}]);return Handler;}(React.Component);_defineProperty(Handler,\"displayName\",name);return Handler;}","map":{"version":3,"sources":["createHandler.ts"],"names":["UIManagerAny","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","UIManagerConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","RNGestureHandlerModule","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","DeviceEventEmitter","extract","refs","Array","r","props","stateToPropMappings","State","allowedProps","config","customNativeProps","React","constructor","handlerIDToTag","componentDidMount","_","hasUnresolvedRefs","setImmediate","filterConfig","transformProps","findNodeHandle","componentDidUpdate","viewTag","componentWillUnmount","clearImmediate","handlerID","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","update","deepEqual","setNativeProps","mergedProps","updates","render","gestureEventHandler","onGestureEvent","gestureStateEventHandler","onHandlerStateChange","events","undefined","grandChildren","Touchable","color","hitSlop","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"script"}