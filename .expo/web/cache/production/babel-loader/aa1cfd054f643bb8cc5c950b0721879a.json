{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=DrawerView;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _reactNativeScreens=require(\"react-native-screens\");var _native=require(\"@react-navigation/native\");var _GestureHandler=require(\"./GestureHandler\");var _SafeAreaProviderCompat=_interopRequireDefault(require(\"./SafeAreaProviderCompat\"));var _ResourceSavingScene=_interopRequireDefault(require(\"./ResourceSavingScene\"));var _Header=_interopRequireDefault(require(\"./Header\"));var _DrawerContent=_interopRequireDefault(require(\"./DrawerContent\"));var _Drawer=_interopRequireDefault(require(\"./Drawer\"));var _DrawerOpenContext=_interopRequireDefault(require(\"../utils/DrawerOpenContext\"));var _DrawerPositionContext=_interopRequireDefault(require(\"../utils/DrawerPositionContext\"));var _useWindowDimensions=_interopRequireDefault(require(\"../utils/useWindowDimensions\"));var _getIsDrawerOpenFromState=_interopRequireDefault(require(\"../utils/getIsDrawerOpenFromState\"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}var getDefaultDrawerWidth=function getDefaultDrawerWidth(_ref){var height=_ref.height,width=_ref.width;var smallerAxisSize=Math.min(height,width);var isLandscape=width>height;var isTablet=smallerAxisSize>=600;var appBarHeight=_reactNative.Platform.OS==='ios'?isLandscape?32:44:56;var maxWidth=isTablet?320:280;return Math.min(smallerAxisSize-appBarHeight,maxWidth);};var GestureHandlerWrapper=_GestureHandler.GestureHandlerRootView!==null&&_GestureHandler.GestureHandlerRootView!==void 0?_GestureHandler.GestureHandlerRootView:_reactNative.View;function DrawerView(_ref2){var state=_ref2.state,navigation=_ref2.navigation,descriptors=_ref2.descriptors,_ref2$lazy=_ref2.lazy,lazy=_ref2$lazy===void 0?true:_ref2$lazy,_ref2$drawerContent=_ref2.drawerContent,drawerContent=_ref2$drawerContent===void 0?function(props){return React.createElement(_DrawerContent.default,props);}:_ref2$drawerContent,_ref2$drawerPosition=_ref2.drawerPosition,drawerPosition=_ref2$drawerPosition===void 0?_reactNative.I18nManager.isRTL?'right':'left':_ref2$drawerPosition,_ref2$keyboardDismiss=_ref2.keyboardDismissMode,keyboardDismissMode=_ref2$keyboardDismiss===void 0?'on-drag':_ref2$keyboardDismiss,_ref2$overlayColor=_ref2.overlayColor,overlayColor=_ref2$overlayColor===void 0?'rgba(0, 0, 0, 0.5)':_ref2$overlayColor,_ref2$drawerType=_ref2.drawerType,drawerType=_ref2$drawerType===void 0?'front':_ref2$drawerType,_ref2$hideStatusBar=_ref2.hideStatusBar,hideStatusBar=_ref2$hideStatusBar===void 0?false:_ref2$hideStatusBar,_ref2$statusBarAnimat=_ref2.statusBarAnimation,statusBarAnimation=_ref2$statusBarAnimat===void 0?'slide':_ref2$statusBarAnimat,drawerContentOptions=_ref2.drawerContentOptions,drawerStyle=_ref2.drawerStyle,edgeWidth=_ref2.edgeWidth,gestureHandlerProps=_ref2.gestureHandlerProps,minSwipeDistance=_ref2.minSwipeDistance,sceneContainerStyle=_ref2.sceneContainerStyle,_ref2$detachInactiveS=_ref2.detachInactiveScreens,detachInactiveScreens=_ref2$detachInactiveS===void 0?true:_ref2$detachInactiveS;var _React$useState=React.useState([state.routes[state.index].key]),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),loaded=_React$useState2[0],setLoaded=_React$useState2[1];var dimensions=(0,_useWindowDimensions.default)();var _useTheme=(0,_native.useTheme)(),colors=_useTheme.colors;var isDrawerOpen=(0,_getIsDrawerOpenFromState.default)(state);var handleDrawerOpen=React.useCallback(function(){navigation.dispatch((0,_extends2.default)({},_native.DrawerActions.openDrawer(),{target:state.key}));},[navigation,state.key]);var handleDrawerClose=React.useCallback(function(){navigation.dispatch((0,_extends2.default)({},_native.DrawerActions.closeDrawer(),{target:state.key}));},[navigation,state.key]);React.useEffect(function(){if(!isDrawerOpen||drawerType==='permanent'){return;}var handleClose=function handleClose(){if(!navigation.isFocused()){return false;}handleDrawerClose();return true;};var handleEscape=function handleEscape(e){if(e.key==='Escape'){handleClose();}};var subscription=_reactNative.BackHandler.addEventListener('hardwareBackPress',handleClose);if(_reactNative.Platform.OS==='web'){var _document,_document$body,_document$body$addEve;(_document=document)===null||_document===void 0?void 0:(_document$body=_document.body)===null||_document$body===void 0?void 0:(_document$body$addEve=_document$body.addEventListener)===null||_document$body$addEve===void 0?void 0:_document$body$addEve.call(_document$body,'keyup',handleEscape);}return function(){subscription.remove();if(_reactNative.Platform.OS==='web'){var _document2,_document2$body,_document2$body$remov;(_document2=document)===null||_document2===void 0?void 0:(_document2$body=_document2.body)===null||_document2$body===void 0?void 0:(_document2$body$remov=_document2$body.removeEventListener)===null||_document2$body$remov===void 0?void 0:_document2$body$remov.call(_document2$body,'keyup',handleEscape);}};},[drawerType,handleDrawerClose,isDrawerOpen,navigation]);var focusedRouteKey=state.routes[state.index].key;if(!loaded.includes(focusedRouteKey)){setLoaded([].concat((0,_toConsumableArray2.default)(loaded),[focusedRouteKey]));}var renderNavigationView=function renderNavigationView(_ref3){var progress=_ref3.progress;return React.createElement(_DrawerPositionContext.default.Provider,{value:drawerPosition},drawerContent((0,_extends2.default)({},drawerContentOptions,{progress:progress,state:state,navigation:navigation,descriptors:descriptors})));};var renderContent=function renderContent(){var isScreensEnabled=(_reactNativeScreens.screensEnabled===null||_reactNativeScreens.screensEnabled===void 0?void 0:(0,_reactNativeScreens.screensEnabled)())&&detachInactiveScreens;return React.createElement(_reactNativeScreens.ScreenContainer,{enabled:isScreensEnabled,style:styles.content},state.routes.map(function(route,index){var descriptor=descriptors[route.key];var unmountOnBlur=descriptor.options.unmountOnBlur;var isFocused=state.index===index;if(unmountOnBlur&&!isFocused){return null;}if(lazy&&!loaded.includes(route.key)&&!isFocused){return null;}var _descriptor$options=descriptor.options,_descriptor$options$h=_descriptor$options.header,header=_descriptor$options$h===void 0?function(props){return React.createElement(_Header.default,props);}:_descriptor$options$h,_descriptor$options$h2=_descriptor$options.headerShown,headerShown=_descriptor$options$h2===void 0?false:_descriptor$options$h2;return React.createElement(_ResourceSavingScene.default,{key:route.key,style:[_reactNative.StyleSheet.absoluteFill,{opacity:isFocused?1:0}],isVisible:isFocused,enabled:isScreensEnabled},headerShown?React.createElement(_native.NavigationContext.Provider,{value:descriptor.navigation},React.createElement(_native.NavigationRouteContext.Provider,{value:route},header({layout:dimensions,scene:{route:route,descriptor:descriptor}}))):null,descriptor.render());}));};var activeKey=state.routes[state.index].key;var _descriptors$activeKe=descriptors[activeKey].options,gestureEnabled=_descriptors$activeKe.gestureEnabled,swipeEnabled=_descriptors$activeKe.swipeEnabled;return React.createElement(_native.NavigationHelpersContext.Provider,{value:navigation},React.createElement(GestureHandlerWrapper,{style:styles.content},React.createElement(_SafeAreaProviderCompat.default,null,React.createElement(_DrawerOpenContext.default.Provider,{value:isDrawerOpen},React.createElement(_Drawer.default,{open:isDrawerOpen,gestureEnabled:gestureEnabled,swipeEnabled:swipeEnabled,onOpen:handleDrawerOpen,onClose:handleDrawerClose,gestureHandlerProps:gestureHandlerProps,drawerType:drawerType,drawerPosition:drawerPosition,sceneContainerStyle:[{backgroundColor:colors.background},sceneContainerStyle],drawerStyle:[{width:getDefaultDrawerWidth(dimensions),backgroundColor:colors.card},drawerType==='permanent'&&(drawerPosition==='left'?{borderRightColor:colors.border,borderRightWidth:_reactNative.StyleSheet.hairlineWidth}:{borderLeftColor:colors.border,borderLeftWidth:_reactNative.StyleSheet.hairlineWidth}),drawerStyle],overlayStyle:{backgroundColor:overlayColor},swipeEdgeWidth:edgeWidth,swipeDistanceThreshold:minSwipeDistance,hideStatusBar:hideStatusBar,statusBarAnimation:statusBarAnimation,renderDrawerContent:renderNavigationView,renderSceneContent:renderContent,keyboardDismissMode:keyboardDismissMode,dimensions:dimensions})))));}var styles=_reactNative.StyleSheet.create({content:{flex:1}});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","lazy","drawerContent","props","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","detachInactiveScreens","React","state","dimensions","colors","isDrawerOpen","getIsDrawerOpenFromState","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","handleClose","handleEscape","e","subscription","BackHandler","focusedRouteKey","loaded","setLoaded","renderNavigationView","progress","descriptors","renderContent","isScreensEnabled","styles","content","descriptor","route","unmountOnBlur","isFocused","header","headerShown","StyleSheet","opacity","layout","scene","activeKey","swipeEnabled","backgroundColor","background","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={isScreensEnabled} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={isScreensEnabled}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}