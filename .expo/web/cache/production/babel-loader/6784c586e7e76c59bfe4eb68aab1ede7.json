{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useNavigationCache;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _extends3=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var React=_interopRequireWildcard(require(\"react\"));var _routers=require(\"@react-navigation/routers\");var _excluded=[\"emit\"];function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useNavigationCache(_ref){var state=_ref.state,getState=_ref.getState,navigation=_ref.navigation,_setOptions=_ref.setOptions,router=_ref.router,emitter=_ref.emitter;var cache=React.useMemo(function(){return{current:{}};},[getState,navigation,_setOptions,router,emitter]);var actions=(0,_extends3.default)({},router.actionCreators,_routers.CommonActions);cache.current=state.routes.reduce(function(acc,route){var previous=cache.current[route.key];if(previous){acc[route.key]=previous;}else{var emit=navigation.emit,rest=(0,_objectWithoutProperties2.default)(navigation,_excluded);var dispatch=function dispatch(action){var payload=typeof action==='function'?action(getState()):action;navigation.dispatch(typeof payload==='object'&&payload!=null?(0,_extends3.default)({source:route.key},payload):payload);};var helpers=Object.keys(actions).reduce(function(acc,name){acc[name]=function(){return dispatch(actions[name].apply(actions,arguments));};return acc;},{});acc[route.key]=(0,_extends3.default)({},rest,helpers,emitter.create(route.key),{dispatch:dispatch,setOptions:function setOptions(options){return _setOptions(function(o){return(0,_extends3.default)({},o,(0,_defineProperty2.default)({},route.key,(0,_extends3.default)({},o[route.key],options)));});},isFocused:function isFocused(){var state=getState();if(state.routes[state.index].key!==route.key){return false;}return navigation?navigation.isFocused():true;}});}return acc;},{});return cache.current;}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["emitter","cache","current","actions","router","CommonActions","previous","route","acc","rest","dispatch","action","payload","getState","navigation","source","helpers","setOptions","options","o","isFocused","state"],"mappings":"6cAAA,oDACA,kD,ihCAmCe,QAAA,mBAAA,MAUI,IAPjB,MAOiB,MAPjB,KAOiB,CAPjB,QAOiB,MAPjB,QAOiB,CAPjB,UAOiB,MAPjB,UAOiB,CAPjB,WAOiB,MAPjB,UAOiB,CAPjB,MAOiB,MAPjB,MAOiB,CADjBA,OACiB,MADjBA,OACiB,CAIjB,GAAMC,MAAK,CAAG,KAAK,CAAL,OAAA,CACZ,iBAAO,CAAEC,OAAO,CAAE,EAAX,CAAP,EADY,CAGZ,CAAA,QAAA,CAAA,UAAA,CAAA,WAAA,CAAA,MAAA,CAHF,OAGE,CAHY,CAAd,CAMA,GAAMC,QAAO,0BACRC,MAAM,CADK,cAAH,CAERC,sBAFQ,CAAb,CAKAJ,KAAK,CAALA,OAAAA,CAAgB,KAAK,CAAL,MAAA,CAAA,MAAA,CACd,SAAA,GAAA,CAAA,KAAA,CAAgB,CACd,GAAMK,SAAQ,CAAGL,KAAK,CAALA,OAAAA,CAAcM,KAAK,CAApC,GAAiBN,CAAjB,CAEA,GAAA,QAAA,CAAc,CAEZO,GAAG,CAACD,KAAK,CAATC,GAAG,CAAHA,CAAAA,QAAAA,CAFF,CAAA,IAGO,CAEL,GAAM,KAAN,CAAA,UAAA,CAAM,IAAN,CAAiBC,IAAjB,uCAAA,UAAA,YAEA,GAAMC,SAAQ,CACZC,QADID,SACJC,CAAAA,MADe,CAEZ,CACH,GAAMC,QAAO,CACX,MAAA,OAAA,GAAA,UAAA,CAA+BD,MAAM,CAACE,QAAtC,EAAqC,CAArC,CADF,MAAA,CAGAC,UAAU,CAAVA,QAAAA,CACE,MAAA,QAAA,GAAA,QAAA,EAA+BF,OAAO,EAAtC,IAAA,wBACMG,MAAM,CAAER,KAAK,CAAf,GADJ,EAC4BK,OAD5B,EADFE,OAAAA,EANF,CAAA,CAaA,GAAME,QAAO,CAAG,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,MAAA,CACd,SAAA,GAAA,CAAA,IAAA,CAAe,CAEbR,GAAG,CAAHA,IAAG,CAAHA,CAAY,iBAAkBE,SAAQ,CAACP,OAAO,CAA9CK,IAA8C,CAAPL,OAAAA,OAAO,WAAR,CAA1B,EAAZK,CACA,MAAA,IAAA,CAJY,CAAA,CAAhB,EAAgB,CAAhB,CASAA,GAAG,CAACD,KAAK,CAATC,GAAG,CAAHA,0BAAiB,IAAjBA,CAAiB,OAAjBA,CAGKR,OAAO,CAAPA,MAAAA,CAAeO,KAAK,CAHR,GAGZP,CAHLQ,EAIEE,QAJe,CAIfA,QAJFF,CAKES,UAAU,CAAGC,oBAAAA,OAAD,QACVD,YAAU,CAAEE,SAAAA,CAAD,iCAAQ,CAAR,iCAERZ,KAAK,CAAN,GAFS,0BAESY,CAAC,CAACZ,KAAK,CAAZ,GAAM,CAFV,CAE0BW,OAF1B,KAAD,CADA,EALdV,CAUEY,SAAS,CAAE,oBAAM,CACf,GAAMC,MAAK,CAAGR,QAAd,EAAA,CAEA,GAAIQ,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAAA,GAAAA,GAAkCd,KAAK,CAA3C,GAAA,CAAiD,CAC/C,MAAA,MAAA,CAJa,CASf,MAAOO,WAAU,CAAGA,UAAU,CAAb,SAAGA,EAAH,CAAjB,IAAA,CACD,CApBHN,GAsBD,CAED,MAAA,IAAA,CAzDY,CAAA,CAAhBP,EAAgB,CAAhBA,CA8DA,MAAOA,MAAK,CAAZ,OAAA,CACD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"script"}