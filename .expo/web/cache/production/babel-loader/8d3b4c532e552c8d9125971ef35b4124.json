{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.createSharedStyle=createSharedStyle;exports.createVariations=createVariations;var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _lodash=_interopRequireDefault(require(\"lodash\"));function capitalizeFirstLetter(value){return value.charAt(0).toUpperCase()+value.slice(1);}function createVariations(baseName,nameSuffixes,key,value){return _lodash.default.reduce(nameSuffixes,function(result,variant){var variantName=variant?baseName+\"-\"+variant:baseName;var keyName=variant?\"\"+key+capitalizeFirstLetter(variant):key;result[variantName]=(0,_defineProperty2.default)({},keyName,value);return result;},{});}function createSharedStyle(componentNames){var sharedStyle=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var customStyles=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return _lodash.default.reduce(componentNames,function(result,componentName){result[componentName]=(0,_extends2.default)({},sharedStyle,customStyles[componentName]);return result;},{});}","map":{"version":3,"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","createVariations","baseName","nameSuffixes","key","_","reduce","result","variant","variantName","keyName","createSharedStyle","componentNames","sharedStyle","customStyles","componentName"],"sources":["D:/React_Native/SourceCode_VPM_Swine/node_modules/native-base-shoutem-theme/src/addons.js"],"sourcesContent":["import _ from 'lodash';\n\nfunction capitalizeFirstLetter(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\n/**\n * Creates a set of style variations with the provided name\n * suffixes. This function is useful when creating style variations\n * for styles with shorthands, e.g., margin, padding, etc. This function\n * will return an object with the keys that represent the style variations,\n * and each key will have an object with the provided key and value. Both\n * style variation, and value object keys will get the provided suffixes. The\n * style variation key names are expected to be in snake-case, and value keys\n * are expected to be in camelCase.\n *\n * Example:\n * createVariations('large-margin', ['', 'left', 'right'], 'margin', 30)\n * will return:\n * {\n *   'large-margin': {\n *     margin: 30\n *   },\n *   'large-margin-left': {\n *     marginLeft: 30,\n *   },\n *   'large-margin-right': {\n *     marginRight: 30,\n *   }\n * }\n *\n * @param baseName Base name for style variation Â§names.\n * @param nameSuffixes Suffixes that will be concatenated to baseName.\n * @param key The value key name to use.\n * @param value The value that will be assigned to the key property.\n * @returns {object} An object with the generated style variants.\n */\nexport function createVariations(baseName, nameSuffixes, key, value) {\n  return _.reduce(nameSuffixes, (result, variant) => {\n    const variantName = variant ? `${baseName}-${variant}` : baseName;\n    const keyName = variant ? `${key}${capitalizeFirstLetter(variant)}` : key;\n\n    // eslint-disable-next-line no-param-reassign\n    result[variantName] = {\n      [keyName]: value,\n    };\n\n    return result;\n  }, {});\n}\n\n/**\n * Creates a set of style rules for the provided components. This function\n * is useful when a set of components needs to have the same style. The\n * shared style will be applied to each component. It is also possible to\n * provide custom style for each component that will be applied on top of\n * the shared style.\n *\n * Example:\n * createSharedStyle(['shoutem.ui.Text', 'shoutem.ui.Title'], {\n *   color: 'white'\n * }, {\n *   'shoutem.ui.Title: {\n *     marginBottom: 15\n *   }\n * );\n * will return:\n * {\n *   'shoutem.ui.Text': {\n *     color: 'white'\n *   },\n *   'shoutem.ui.Title': {\n *     color: 'white',\n *     marginBottom: 15\n *   }\n * }\n *\n * @param componentNames The names of the components to generate styles for.\n * @param sharedStyle The style to apply to each component.\n * @param customStyles Style overrides by component names.\n * @returns {object} An object with the generated styles.\n */\nexport function createSharedStyle(componentNames, sharedStyle = {}, customStyles = {}) {\n  return _.reduce(componentNames, (result, componentName) => {\n    // eslint-disable-next-line no-param-reassign\n    result[componentName] = {\n      ...sharedStyle,\n      ...customStyles[componentName],\n    };\n\n    return result;\n  }, {});\n}\n"],"mappings":"gZAAA,sDAEA,QAASA,sBAAT,CAA+BC,KAA/B,CAAsC,CACpC,MAAOA,MAAK,CAACC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,GAAgCF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAvC,CACD,CAiCM,QAASC,iBAAT,CAA0BC,QAA1B,CAAoCC,YAApC,CAAkDC,GAAlD,CAAuDP,KAAvD,CAA8D,CACnE,MAAOQ,gBAAA,CAAEC,MAAF,CAASH,YAAT,CAAuB,SAACI,MAAD,CAASC,OAAT,CAAqB,CACjD,GAAMC,YAAW,CAAGD,OAAO,CAAMN,QAAN,KAAkBM,OAAlB,CAA8BN,QAAzD,CACA,GAAMQ,QAAO,CAAGF,OAAO,IAAMJ,GAAN,CAAYR,qBAAqB,CAACY,OAAD,CAAjC,CAA+CJ,GAAtE,CAGAG,MAAM,CAACE,WAAD,CAAN,iCACGC,OADH,CACab,KADb,EAIA,MAAOU,OAAP,CACD,CAVM,CAUJ,EAVI,CAAP,CAWD,CAiCM,QAASI,kBAAT,CAA2BC,cAA3B,CAAgF,IAArCC,YAAqC,2DAAvB,EAAuB,IAAnBC,aAAmB,2DAAJ,EAAI,CACrF,MAAOT,gBAAA,CAAEC,MAAF,CAASM,cAAT,CAAyB,SAACL,MAAD,CAASQ,aAAT,CAA2B,CAEzDR,MAAM,CAACQ,aAAD,CAAN,0BACKF,WADL,CAEKC,YAAY,CAACC,aAAD,CAFjB,EAKA,MAAOR,OAAP,CACD,CARM,CAQJ,EARI,CAAP,CASD"},"metadata":{},"sourceType":"script"}