{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=useWindowDimensions;var _slicedToArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function useWindowDimensions(){var _React$useState=React.useState(function(){var _Dimensions$get=_reactNative.Dimensions.get('window'),_Dimensions$get$heigh=_Dimensions$get.height,height=_Dimensions$get$heigh===void 0?0:_Dimensions$get$heigh,_Dimensions$get$width=_Dimensions$get.width,width=_Dimensions$get$width===void 0?0:_Dimensions$get$width;return{height:height,width:width};}),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),dimensions=_React$useState2[0],setDimensions=_React$useState2[1];React.useEffect(function(){var onChange=function onChange(_ref){var window=_ref.window;var width=window.width,height=window.height;setDimensions(function(d){if(width===d.width&&height===d.height){return d;}return{width:width,height:height};});};onChange({window:_reactNative.Dimensions.get('window')});_reactNative.Dimensions.addEventListener('change',onChange);return function(){return _reactNative.Dimensions.removeEventListener('change',onChange);};},[]);return dimensions;}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["height","width","Dimensions","React","onChange","window","setDimensions","d"],"mappings":"4QAAA,oDACA,yC,0/BAIe,QAAA,oBAAA,EAA+B,CAC5C,oBAAoC,KAAK,CAAL,QAAA,CAAe,UAAM,CAEvD,oBAAkCE,uBAAAA,CAAAA,GAAAA,CAAlC,QAAkCA,CAAlC,uCAAQF,MAAR,CAAQA,MAAR,gCAAM,CAAN,6DAAoBC,KAApB,CAAoBA,KAApB,gCAA4B,CAA5B,uBAEA,MAAO,CAAED,MAAF,CAAEA,MAAF,CAAUC,KAAAA,CAAAA,KAAV,CAAP,CAJF,CAAoC,CAApC,iEAAM,UAAN,qBAAM,aAAN,qBAOAE,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpB,GAAMC,SAAQ,CAAG,QAAXA,SAAW,MAAwC,IAArCC,OAAqC,MAArCA,MAAqC,CACvD,GAAM,MAAN,CAAA,MAAA,CAAM,KAAN,CAAeL,MAAf,CAAA,MAAA,CAAeA,MAAf,CAEAM,aAAa,CAAEC,SAAAA,CAAD,CAAO,CACnB,GAAIN,KAAK,GAAKM,CAAC,CAAXN,KAAAA,EAAqBD,MAAM,GAAKO,CAAC,CAArC,MAAA,CAA8C,CAC5C,MAAA,EAAA,CACD,CAED,MAAO,CAAEN,KAAF,CAAEA,KAAF,CAASD,MAAAA,CAAAA,MAAT,CAAP,CALFM,CAAa,CAAbA,CAJkB,CACpB,CAcAF,QAAQ,CAAC,CAAEC,MAAM,CAAEH,uBAAAA,CAAAA,GAAAA,CAAAA,QAAAA,CAAV,CAAD,CAARE,CAEAF,uBAAAA,CAAAA,gBAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAEA,MAAO,kBAAMA,wBAAAA,CAAAA,mBAAAA,CAAAA,QAAAA,CAAb,QAAaA,CAAN,EAAP,CAnBFC,CAAAA,CAAAA,EAAAA,EAsBA,MAAA,WAAA,CACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"script"}