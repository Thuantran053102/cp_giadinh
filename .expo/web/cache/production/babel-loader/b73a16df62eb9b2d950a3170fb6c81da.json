{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.BorderlessButton=exports.BaseButton=void 0;Object.defineProperty(exports,\"PureNativeButton\",{enumerable:true,get:function get(){return _GestureHandlerButton.default;}});exports.RectButton=exports.RawButton=void 0;var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _assertThisInitialized2=_interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _createNativeWrapper=_interopRequireDefault(require(\"../handlers/createNativeWrapper\"));var _GestureHandlerButton=_interopRequireDefault(require(\"./GestureHandlerButton\"));var _State=require(\"../State\");var _excluded=[\"rippleColor\"],_excluded2=[\"children\",\"style\"],_excluded3=[\"children\",\"style\"];function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!==\"function\")return null;var cacheBabelInterop=new WeakMap();var cacheNodeInterop=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!==\"default\"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var RawButton=(0,_createNativeWrapper.default)(_GestureHandlerButton.default,{shouldCancelWhenOutside:false,shouldActivateOnStart:false});exports.RawButton=RawButton;var BaseButton=function(_React$Component){(0,_inherits2.default)(BaseButton,_React$Component);var _super=_createSuper(BaseButton);function BaseButton(props){var _this;(0,_classCallCheck2.default)(this,BaseButton);_this=_super.call(this,props);_defineProperty((0,_assertThisInitialized2.default)(_this),\"lastActive\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this),\"handleEvent\",function(_ref){var nativeEvent=_ref.nativeEvent;var state=nativeEvent.state,oldState=nativeEvent.oldState,pointerInside=nativeEvent.pointerInside;var active=pointerInside&&state===_State.State.ACTIVE;if(active!==_this.lastActive&&_this.props.onActiveStateChange){_this.props.onActiveStateChange(active);}if(oldState===_State.State.ACTIVE&&state!==_State.State.CANCELLED&&_this.lastActive&&_this.props.onPress){_this.props.onPress(active);}_this.lastActive=active;});_defineProperty((0,_assertThisInitialized2.default)(_this),\"onHandlerStateChange\",function(e){var _this$props$onHandler,_this$props;(_this$props$onHandler=(_this$props=_this.props).onHandlerStateChange)===null||_this$props$onHandler===void 0?void 0:_this$props$onHandler.call(_this$props,e);_this.handleEvent(e);});_defineProperty((0,_assertThisInitialized2.default)(_this),\"onGestureEvent\",function(e){var _this$props$onGesture,_this$props2;(_this$props$onGesture=(_this$props2=_this.props).onGestureEvent)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props2,e);_this.handleEvent(e);});_this.lastActive=false;return _this;}(0,_createClass2.default)(BaseButton,[{key:\"render\",value:function render(){var _this$props5=this.props,rippleColor=_this$props5.rippleColor,rest=(0,_objectWithoutProperties2.default)(_this$props5,_excluded);return React.createElement(RawButton,_extends({rippleColor:(0,_reactNative.processColor)(rippleColor)},rest,{onGestureEvent:this.onGestureEvent,onHandlerStateChange:this.onHandlerStateChange}));}}]);return BaseButton;}(React.Component);exports.BaseButton=BaseButton;var AnimatedBaseButton=_reactNative.Animated.createAnimatedComponent(BaseButton);var btnStyles=_reactNative.StyleSheet.create({underlay:{position:'absolute',left:0,right:0,bottom:0,top:0}});var RectButton=function(_React$Component2){(0,_inherits2.default)(RectButton,_React$Component2);var _super2=_createSuper(RectButton);function RectButton(props){var _this2;(0,_classCallCheck2.default)(this,RectButton);_this2=_super2.call(this,props);_defineProperty((0,_assertThisInitialized2.default)(_this2),\"opacity\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this2),\"onActiveStateChange\",function(active){var _this$props$onActiveS,_this$props3;if(_reactNative.Platform.OS!=='android'){_this2.opacity.setValue(active?_this2.props.activeOpacity:0);}(_this$props$onActiveS=(_this$props3=_this2.props).onActiveStateChange)===null||_this$props$onActiveS===void 0?void 0:_this$props$onActiveS.call(_this$props3,active);});_this2.opacity=new _reactNative.Animated.Value(0);return _this2;}(0,_createClass2.default)(RectButton,[{key:\"render\",value:function render(){var _this$props6=this.props,children=_this$props6.children,style=_this$props6.style,rest=(0,_objectWithoutProperties2.default)(_this$props6,_excluded2);var resolvedStyle=_reactNative.StyleSheet.flatten(style!==null&&style!==void 0?style:{});return React.createElement(BaseButton,_extends({},rest,{style:resolvedStyle,onActiveStateChange:this.onActiveStateChange}),React.createElement(_reactNative.Animated.View,{style:[btnStyles.underlay,{opacity:this.opacity,backgroundColor:this.props.underlayColor,borderRadius:resolvedStyle.borderRadius,borderTopLeftRadius:resolvedStyle.borderTopLeftRadius,borderTopRightRadius:resolvedStyle.borderTopRightRadius,borderBottomLeftRadius:resolvedStyle.borderBottomLeftRadius,borderBottomRightRadius:resolvedStyle.borderBottomRightRadius}]}),children);}}]);return RectButton;}(React.Component);exports.RectButton=RectButton;_defineProperty(RectButton,\"defaultProps\",{activeOpacity:0.105,underlayColor:'black'});var BorderlessButton=function(_React$Component3){(0,_inherits2.default)(BorderlessButton,_React$Component3);var _super3=_createSuper(BorderlessButton);function BorderlessButton(props){var _this3;(0,_classCallCheck2.default)(this,BorderlessButton);_this3=_super3.call(this,props);_defineProperty((0,_assertThisInitialized2.default)(_this3),\"opacity\",void 0);_defineProperty((0,_assertThisInitialized2.default)(_this3),\"onActiveStateChange\",function(active){var _this$props$onActiveS2,_this$props4;if(_reactNative.Platform.OS!=='android'){_this3.opacity.setValue(active?_this3.props.activeOpacity:1);}(_this$props$onActiveS2=(_this$props4=_this3.props).onActiveStateChange)===null||_this$props$onActiveS2===void 0?void 0:_this$props$onActiveS2.call(_this$props4,active);});_this3.opacity=new _reactNative.Animated.Value(1);return _this3;}(0,_createClass2.default)(BorderlessButton,[{key:\"render\",value:function render(){var _this$props7=this.props,children=_this$props7.children,style=_this$props7.style,rest=(0,_objectWithoutProperties2.default)(_this$props7,_excluded3);return React.createElement(AnimatedBaseButton,_extends({},rest,{onActiveStateChange:this.onActiveStateChange,style:[style,_reactNative.Platform.OS==='ios'&&{opacity:this.opacity}]}),children);}}]);return BorderlessButton;}(React.Component);exports.BorderlessButton=BorderlessButton;_defineProperty(BorderlessButton,\"defaultProps\",{activeOpacity:0.3,borderless:true});","map":{"version":3,"sources":["GestureButtons.tsx"],"names":["RawButton","createNativeWrapper","shouldCancelWhenOutside","shouldActivateOnStart","React","constructor","nativeEvent","pointerInside","active","state","State","oldState","e","render","rest","processColor","onHandlerStateChange","AnimatedBaseButton","Animated","btnStyles","underlay","position","left","right","bottom","top","RectButton","activeOpacity","underlayColor","Platform","resolvedStyle","StyleSheet","style","onActiveStateChange","opacity","backgroundColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  processColor,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n  /**\n   * Defines if more than one button could be pressed simultaneously. By default\n   * set true.\n   */\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n\n  /**\n   * Android only.\n   *\n   * Defines color of native ripple animation used since API level 21.\n   */\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  /**\n   * Called when the button gets pressed (analogous to `onPress` in\n   * `TouchableHighlight` from RN core).\n   */\n  onPress?: (pointerInside: boolean) => void;\n\n  /**\n   * Called when button changes from inactive to active and vice versa. It\n   * passes active state as a boolean variable as a first parameter for that\n   * method.\n   */\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  /**\n   * Background color that will be dimmed when button is in active state.\n   */\n  underlayColor?: string;\n\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the underlay when button is in active state.\n   */\n  activeOpacity?: number;\n}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  /**\n   * Android only.\n   *\n   * Set this to false if you want the ripple animation to render only within view bounds.\n   */\n  borderless?: boolean;\n\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the button when it is in an active state.\n   */\n  activeOpacity?: number;\n}\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\nexport class BaseButton extends React.Component<BaseButtonProps> {\n  private lastActive: boolean;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.lastActive = false;\n  }\n\n  private handleEvent = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this.lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    this.lastActive = active;\n  };\n\n  // Normally, the parent would execute it's handler first, then forward the\n  // event to listeners. However, here our handler is virtually only forwarding\n  // events to listeners, so we reverse the order to keep the proper order of\n  // the callbacks (from \"raw\" ones to \"processed\").\n  private onHandlerStateChange = (\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onHandlerStateChange?.(e);\n    this.handleEvent(e);\n  };\n\n  private onGestureEvent = (\n    e: GestureEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onGestureEvent?.(e);\n    this.handleEvent(\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n    ); // TODO: maybe it is not correct\n  };\n\n  render() {\n    const { rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component<RectButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: RectButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(0);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\n\n    return (\n      <BaseButton\n        {...rest}\n        style={resolvedStyle}\n        onActiveStateChange={this.onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            {\n              opacity: this.opacity,\n              backgroundColor: this.props.underlayColor,\n              borderRadius: resolvedStyle.borderRadius,\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\n            },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: BorderlessButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(1);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]},"metadata":{},"sourceType":"script"}